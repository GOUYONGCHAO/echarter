[
["index.html", "echarter: ECharts的R语言接口 前言", " echarter: ECharts的R语言接口 JeevanYue 2018-11-02 前言 我之前主要使用Joshua Kunst 的highcharter做交互式数据可视化，highcharter是highcharts的R语言接口，但highcharter不对highcharts的配置项做重新的定义，基本根据highcharts的API来实现，可以很方便 的使用highcharts官方丰富的教程和案例，以及各种社区帮助，用起来真的非常方便的。 最近我们公司将为客户提供Dashboard数据展示，我是用highcharter做了可视化Demo，但是因为highcharts商用收费，所以开发团队使用了百度的ECharts来实现。 为了跟开发同事更好交流沟通，让生产实现与Demo更贴近，所以我想到ECharts也有R语言接口，最后在Github找到下面这么多实现ECharts的R语言接口。 cosname/recharts - ECharts4 JohnCoene/echarts4r - ECharts4 yihui/recharts - ECharts2 madlogos/recharts - ECharts2 forked from yihui/recharts madlogos/recharts2 - ECharts3 ChanningWong/REcharts3 - ECharts3 XD-DENG/ECharts2Shiny - ECharts3 ECharts的R语言接口真的挺多的，我重点看了前两个包，因为都是基于最新的ECharts4，作者没有弃坑，最近也有更新维护。但是在学习应用这两个包的过程中发现，为了实现某个案例，自己要学习两个接口，ECharts的R语言接口和ECharts的API配置项，并且要不停相互比对。并且在ECharts社区中找到的帮助，常常在R语言接口无法实现。 弄到最后，我已经对ECharts的API配置项比较熟悉了，后来我就决定尝试开发一个ECharts的R语言接口，毕竟我也用了挺多htmlwidgets，但从来没有自己动手开发过一个。所以主要参考highcharter对highcharts的实现方式，开始着手开发echarter。取名为echarter，也是为了向highcharter致敬。 并且还参考学习了cosname/recharts和JohnCoene/echarts4r的ECharts实现方式。 欢迎大家指正。 "],
["author.html", "作者简介", " 作者简介 Jeevan Yue - R developer. "],
["intro.html", "第 1 章 Introduction", " 第 1 章 Introduction echarter是ECharts的R语言接口实现，ECharts是一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在PC和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖轻量级的矢量图形库ZRender，提供直观，交互丰富，可高度个性化定制的数据可视化图表。 ECharts特性: 丰富的可视化类型 多种数据格式无需转换直接使用 千万数据的前端展现 移动端优化 多渲染方案，跨平台使用 深度的交互式数据探索 多维数据的支持以及丰富的视觉编码手段 动态数据 绚丽的特效 … "],
["install.html", "第 2 章 echarter安装", " 第 2 章 echarter安装 echarter包的源代码发布在Github，jeevanyue/echarter，可通过下列代码安装。 devtools::install_github(&quot;jeevanyue/echarter&quot;) "],
["examples.html", "第 3 章 官方案例", " 第 3 章 官方案例 echartsExample取自于cosname/recharts。 echartsExample提供了一种从官网的官方实例中获取JS代码并运行的途径, 除去某些需要加载JSON数据文件的例子, echartsExample`支持大部分Echarts的官网案例. 这个函数支持的范围比较广, 包括Echarts的基本绘图, ecstat, bamap等高级功能, 是JS代码的源生接口 参数: url 例子的网址, 比如’http://echarts.baidu.com/demo.html#bubble-gradient’ JScontent 需要执行的JS代码(方便复制例子里面的代码调试执行), 注意要命名一个option对象用于数据加载 height 绘图区域的高度 weight 绘图区域的宽度, 支持百分比 从http://echarts.baidu.com/demo.html#effectScatter-bmap 获取代码, 并转换为R绘图. library(tidyverse) library(echarter) url = &quot;http://echarts.baidu.com/examples/editor.html?c=bar-tick-align&quot; echartsExample(url) "],
["api-ec.html", "第 4 章 API函数 4.1 演示数据 4.2 基础组件 4.3 其他组件 4.4 直角坐标系ec_grid 4.5 极坐标系ec_polar 4.6 雷达坐标系ec_radar 4.7 平行坐标系ec_parallel 4.8 单轴坐标系ec_singleAxis 4.9 日历坐标系ec_calendar 4.10 地理坐标系ec_geo 4.11 series.data 4.12 数据集: ec_dataset 4.13 ec_add_series 4.14 全局设置echarter.option", " 第 4 章 API函数 4.1 演示数据 library(tidyverse) library(lubridate) library(echarter) weekDays &lt;- c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(weekDays,3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) dat_list &lt;- dat %&gt;% select(-price) %&gt;% spread(weekDay, saleNum) %&gt;% unite(&quot;value&quot;, c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) dat_list$value &lt;- lapply(1:3, function(x){ as.numeric(strsplit(dat_list$value, &quot;_&quot;)[[x]])}) ## echart从0开始索引 dat_matrix &lt;- data.frame( fruit = as.numeric(factor(c(dat$fruit), levels = c(&#39;Apple&#39;, &#39;Pear&#39;, &#39;Banana&#39;))) - 1, weekDay = as.numeric(factor(c(dat$weekDay), levels = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;))) - 1, saleNum = dat$saleNum ) %&gt;% as.matrix() dat_date &lt;- data.frame( date = as.Date(&#39;2017-01-01&#39;) + seq(0,364), value = round(runif(365, 0, 1000), 0), stringsAsFactors = FALSE) AQI &lt;- read.csv(&quot;data/AQI.csv&quot;) dat_geo &lt;- AQI %&gt;% select(城市, lng, lat, AQI) opt = list( xAxis = list( show = TRUE, type = &#39;category&#39;, name = &#39;星期&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)), yAxis = list( show = TRUE, type = &#39;value&#39;), series = list( list( type = &#39;line&#39;, name = &#39;Apple&#39;, data = c(12, 5, 20, 36, 10, 10, 20))) ) 4.2 基础组件 4.2.1 ec_title echart(opt, elementId = &quot;ec&quot;) %&gt;% ec_title(text = &#39;演示数据&#39;) 4.2.2 ec_legend echart(opt) %&gt;% ec_legend( top = &#39;middle&#39;, right = &#39;right&#39;, data = list(list(name = &#39;Apple&#39;, icon = &#39;circle&#39;)), textStyle = list(color = &#39;contrastColor&#39;)) 4.2.3 ec_backgroundColor echart(opt) %&gt;% ec_backgroundColor(c(&#39;#24273e&#39;)) 4.2.4 ec_colors echart(opt) %&gt;% ec_colors(c(&#39;#247ba0&#39;, &#39;#70c1b3&#39;, &#39;#b2dbbf&#39;)) 4.2.5 ec_textStyle echart(opt) %&gt;% ec_backgroundColor(c(&#39;#24273e&#39;)) %&gt;% ec_colors(c(&#39;#247ba0&#39;, &#39;#70c1b3&#39;, &#39;#b2dbbf&#39;)) %&gt;% ec_textStyle(color = &#39;#ffffff&#39;) 4.3 其他组件 4.3.1 ec_tooltip echart(opt) %&gt;% ec_tooltip( trigger = &#39;item&#39;) 4.3.2 ec_graphic graphic_opt &lt;- list( type = &#39;group&#39;, rotation = 3.14 / 4, bounding = &#39;raw&#39;, right = 110, bottom = 110, z = 100, children = list( list( type = &#39;rect&#39;, left = &#39;center&#39;, top = &#39;center&#39;, z = 100, shape = list( width = 400, height = 50 ), style = list( fill = &#39;rgba(0,0,0,0.3)&#39; ) ), list( type = &#39;text&#39;, left = &#39;center&#39;, top = &#39;center&#39;, z = 100, style = list( fill = &#39;#fff&#39;, text = &#39;ECHARTER&#39;, font = &#39;bold 26px Microsoft YaHei&#39; ) ) ) ) echart(opt) %&gt;% ec_graphic(graphic_opt) 4.3.3 ec_axisPointer echart(opt) %&gt;% ec_tooltip( trigger = &#39;item&#39;) %&gt;% ec_axisPointer(show = TRUE, type = &#39;line&#39;) xAxis.axisPointer 默认不显示。但是如果 tooltip.trigger 设置为 ‘axis’ 或者 tooltip.axisPointer.type 设置为 ‘cross’，则自动显示 axisPointer。坐标系会自动选择显示显示哪个轴的 axisPointer，也可以使用 tooltip.axisPointer.axis 改变这种选择。 echart(opt) %&gt;% ec_tooltip( trigger = &#39;item&#39;) %&gt;% ec_xAxis( axisPointer = list( show = TRUE, type = &#39;shadow&#39;)) %&gt;% ec_yAxis( axisPointer = list( show = TRUE, type = &#39;line&#39;)) tooltip.axisPointer tooltip.axisPointer 是配置坐标轴指示器的快捷方式。实际上坐标轴指示器的全部功能，都可以通过轴上的 axisPointer 配置项完成（例如 xAxis.axisPointer 或 angleAxis.axisPointer）。但是使用 tooltip.axisPinter 在简单场景下会更方便一些。 注意： tooltip.axisPointer 中诸配置项的优先级低于轴上的 axisPointer 的配置项。 echart(opt) %&gt;% ec_tooltip( trigger = &#39;item&#39;, axisPointer = list(type = &#39;cross&#39;)) 4.3.4 ec_toolbox echart(opt) %&gt;% ec_toolbox( show = TRUE, orinent = &#39;horizontal&#39;, feature = list( dataView = list( show = TRUE, readOnly = TRUE), magicType = list( show = TRUE, type = c(&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;)), restore = list( show = TRUE), brush = list(), saveAsImage = list( show = TRUE))) 拓展 toolbox_icon_excel &lt;- &quot;M821.469342 118.206149H205.714155c-48.380541 0-87.963909 39.583368-87.963909 87.965866v615.755187c0 48.380541 39.583368 87.963909 87.963909 87.963909h615.755187c48.380541 0 87.963909-39.583368 87.963909-87.963909V206.170058c0-48.380541-39.583368-87.963909-87.963909-87.963909z m-120.710683 615.755188h-80.487485l-105.726529-171.220078-105.728486 171.220078h-78.896715l148.100104-221.956445-148.156847-221.968185h78.955415l105.726529 171.231817 105.726529-171.018541h80.319212l-149.929587 221.754909 150.09786 221.956445z&quot; toolbox_js_excel &lt;- &quot;function (params){console.log(params);alert(&#39;下载Excel&#39;);}&quot; echart() %&gt;% ec_add_series( data = dat_date, type = &#39;line&#39;, name = &quot;date&quot;, mapping = ecaes(x = date, y = value)) %&gt;% ec_legend(data = list(&#39;date&#39;), show = TRUE) %&gt;% ec_toolbox( orinent = &#39;horizontal&#39;, feature = list( dataView = list( show = TRUE, readOnly = TRUE), magicType = list( show = TRUE, type = c(&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;)), restore = list( show = TRUE), saveAsImage = list( show = TRUE), myexcel = list( show = TRUE, title = &#39;Excel&#39;, icon = toolbox_icon_excel, onclick = htmlwidgets::JS(toolbox_js_excel) ) ) ) 4.3.5 ec_visualMap 数据可视化是数据到视觉元素的映射过程（这个过程也可称为视觉编码，视觉元素也可称为视觉通道）。 ECharts 的每种图表本身就内置了这种映射过程，比如折线图把数据映射到『线』，柱状图把数据映射到『长度』。一些更复杂的图表，如graph、事件河流图、treemap 也都会做出他们内置的映射。 此外，ECharts 还提供了 visualMap 组件 来提供通用的视觉映射。visualMap 组件中可以使用的视觉元素有：图形类别（symbol）、图形大小（symbolSize）、颜色（color）、透明度（opacity）、颜色透明度（colorAlpha）、颜色明暗度（colorLightness）、颜色饱和度（colorSaturation）、色调（colorHue） 连续型（visualMapContinuous） 分段型（visualMapPiecewise） 分段型视觉映射组件（visualMapPiecewise），有三种模式： -连续型数据平均分段:依据visualMap-piecewise.splitNumber来自动平均分割成若干块。 - 连续型数据自定义分段:依据visualMap-piecewise.pieces来定义每块范围。 - 离散数据（类别性数据）:类别定义在 visualMap-piecewise.categories 中。 echart() %&gt;% ec_grid(show = TRUE, right = &#39;100&#39;) %&gt;% ec_add_series( data = dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum)) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}的销量: {c}&#39;) %&gt;% ec_visualMap( TYPE = &#39;piecewise&#39;, splitNumber = 5, min = 0, max = 100, left = &#39;right&#39;, top = &#39;middle&#39;, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;)) echart() %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_xAxis(type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Apple&#39;), type = &quot;scatter&quot;, mapping = ecaes(name = weekDay, value = saleNum)) %&gt;% ec_grid(show = TRUE, right = &#39;100&#39;) %&gt;% ec_visualMap( type = &#39;continuous&#39;, calculable = TRUE, min = 0, max = 100, left = &#39;right&#39;, top = &#39;middle&#39;, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;)) 4.3.6 ec_dataZoom dataZoom 组件能够在直角坐标系（grid）、极坐标系（polar）中实现这一功能。 内置型数据区域缩放组件（dataZoomInside）：内置于坐标系中。 滑动条型数据区域缩放组件（dataZoomSlider）：有单独的滑动条操作。 框选型数据区域缩放组件（dataZoomSelect）：全屏的选框进行数据区域缩放。入口和配置项均在 toolbox中。 echart() %&gt;% ec_grid( show = TRUE, bottom = &#39;80&#39;, right = &#39;80&#39;) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_xAxis(type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_add_series( data = dat, type = &quot;scatter&quot;, mapping = ecaes(name = weekDay, value = saleNum, group = fruit)) %&gt;% ec_legend( top = &#39;middle&#39;, right = &#39;right&#39;) %&gt;% ec_dataZoom(type = &#39;slider&#39;) 4.3.7 ec_timeline timeline组件，提供了在多个ECharts option间进行切换、播放等操作的功能。timeline涉及到另外两个组件baseOption和options，baseOption用来配置timeline组件，options用来配置多个ECharts。 在echarter中使用timeline，可以通过下列两种方式： ec_timeline和ec_options，ec_timeline(ec, ...)配置timeline组件信息，ec_options(ec, ecs)中ecs为多个echarter的list ec_timeline(ec, ecs, ...)，ecs为多个echarter的list，...为timeline组件信信息 ec1 &lt;- echart() %&gt;% ec_add_series( name = &quot;Apple&quot;, data = filter(dat, fruit == &#39;Apple&#39;), type = &quot;line&quot;, mapping = ecaes(weekDay, saleNum)) %&gt;% ec_title(text = &#39;Apple&#39;) ec2 &lt;- echart() %&gt;% ec_add_series( name = &quot;Pear&quot;, data = filter(dat, fruit == &#39;Pear&#39;), type = &quot;line&quot;, mapping = ecaes(weekDay, saleNum)) %&gt;% ec_title(text = &#39;Pear&#39;) ec3 &lt;- echart() %&gt;% ec_add_series( name = &quot;Banana&quot;, data = filter(dat, fruit == &#39;Banana&#39;), type = &quot;line&quot;, mapping = ecaes(weekDay, saleNum)) %&gt;% ec_title(text = &#39;Banana&#39;) echart() %&gt;% ec_timeline( axisType = &#39;category&#39;, autoPlay = TRUE, data = list( &quot;Apple&quot;,&quot;Pear&quot;, list(value = &#39;Banana&#39;, symbol = &#39;diamond&#39;, symbolSize = 16) )) %&gt;% ec_options(list(ec1,ec2,ec3)) %&gt;% ec_grid(show = TRUE, bottom = &#39;100&#39;, baseoption = TRUE) %&gt;% ec_title( subtext = &quot;data from sale&quot;, baseoption = TRUE) %&gt;% ec_tooltip(trigger = &#39;axis&#39;, baseoption = TRUE) %&gt;% ec_legend( data = list(&#39;Apple&#39;, &#39;Pear&#39;, &#39;Banana&#39;), baseoption = TRUE) ec_timeline2( ecs = list(ec1,ec2,ec3), axisType = &#39;category&#39;, autoPlay = TRUE, data = list( &quot;Apple&quot;,&quot;Pear&quot;, list(value = &#39;Banana&#39;, symbol = &#39;diamond&#39;, symbolSize = 16) )) %&gt;% ec_grid(show = TRUE, bottom = &#39;100&#39;, baseoption = TRUE) %&gt;% ec_title( subtext = &quot;data from sale&quot;, baseoption = TRUE) %&gt;% ec_tooltip(trigger = &#39;axis&#39;, baseoption = TRUE) %&gt;% ec_legend( data = list(&#39;Apple&#39;, &#39;Pear&#39;, &#39;Banana&#39;), baseoption = TRUE) 4.3.8 ec_brush 启动 brush 的按钮既可以在 toolbox 中指定（参见 toolbox.feature.brush.type），也可以在 brush 组件的配置中指定（参见 brush.toolbox）。 echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_title(text = &#39;水果销量&#39;) %&gt;% ec_legend( top = &#39;middle&#39;, right = &#39;right&#39;) %&gt;% ec_toolbox( show = TRUE, orinent = &#39;horizontal&#39;, feature = list( dataView = list( show = TRUE, readOnly = TRUE), magicType = list( show = TRUE, type = c(&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;)), restore = list( show = TRUE), brush = list(), saveAsImage = list( show = TRUE))) %&gt;% ec_brush(xAxisIndex = &quot;all&quot;, yAxisIndex = &quot;all&quot;) 4.3.9 ec_mark ec_mark(ec, ..., markname = 'markPoint', serie = NULL)，serie为所要添加series的序列数 ec_markPoint，即ec_markLine(ec, …, markname = ‘markPoint’, serie = NULL) ec_markLine，即ec_markLine(ec, …, markname = ‘ec_markLine’, serie = NULL) ec_markArea，即ec_markLine(ec, …, markname = ‘ec_markArea’, serie = NULL) 4.3.9.1 ec_markPoint echart(opt) %&gt;% ec_mark( markname = &quot;markPoint&quot;, data = list( list(type = &quot;max&quot;, name=&quot;最大值&quot;), list(type = &quot;min&quot;, name=&quot;最小值&quot;)), serie = 1) ## 下列效果相同 # echart(opt) %&gt;% # ec_markPoint( # data = list( # list(type = &quot;max&quot;, name=&quot;最大值&quot;), # list(type = &quot;min&quot;, name=&quot;最小值&quot;)), serie = 1) 4.3.9.2 ec_markLine echart(opt) %&gt;% ec_mark( markname = &quot;markLine&quot;, data = list(list(type = &quot;max&quot;, name = &quot;最大值&quot;))) ## 下列效果相同 # echart(opt) %&gt;% # ec_markLine( # data = list(list(type = &quot;max&quot;, name = &quot;最大值&quot;))) 4.3.9.3 ec_markArea echart(opt) %&gt;% ec_mark( markname = &quot;markArea&quot;, serie = 1, label = list( normal = list(position = &#39;right&#39;)), data = list( list(list(name = &quot;区域&quot;, yAxis = 15), list(yAxis = 25)))) ## 下列效果相同 # echart(opt) %&gt;% # ec_markArea( # serie = 1, # label = list( # normal = list(position = &#39;right&#39;)), # data = list( # list(list(name = &quot;区域&quot;, yAxis = 15), list(yAxis = 25)))) 4.4 直角坐标系ec_grid 直角坐标系内绘图网格，单个 grid 内最多可以放置上下两个 X 轴，左右两个 Y 轴。在单个 ECharts 实例中可以存在任意个 grid 组件。 支持直角坐标系的有：line、bar、scatter、effectScatter、boxplot、candlestick、pictorialBar、lines、heatmap。并且boxplot、candlestick、pictorialBar只支持直角坐标系。 ec_xAxis， ec_yAxis echart(opt) %&gt;% ec_grid( show = TRUE, right = &#39;100&#39;) %&gt;% ec_xAxis( name = &#39;Week&#39;, nameLocation = &#39;center&#39;, nameGap = 30, axisPointer = list(show = TRUE), data = c(&quot;周一&quot;,&quot;周二&quot;,&quot;周三&quot;,&quot;周四&quot;,&quot;周五&quot;,&quot;周六&quot;,&quot;周日&quot;)) %&gt;% ec_yAxis(max = &#39;dataMax&#39;) 4.5 极坐标系ec_polar 支持极坐标系的有：line、bar、scatter、effectScatter。 极坐标系的角度轴：ec_angleAxis，类似于ec_xAxis 极坐标系的径向轴：ec_radiusAxis，类似于ec_yAxis echart() %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_polar( center = c(&#39;50%&#39;, &#39;50%&#39;) ) %&gt;% ec_angleAxis( type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;), boundaryGap = FALSE, splitLine = list( show = TRUE, lineStyle = list( color = &#39;#999&#39;, type = &#39;dashed&#39; )), axisLine =list(show = FALSE) ) %&gt;% ec_radiusAxis(type = &#39;value&#39;) %&gt;% ec_add_series( type = &quot;scatter&quot;, stack = &#39;水果&#39;, coordinateSystem = &#39;polar&#39;, data = dat, mapping = ecaes(name = weekDay, value = saleNum, group = fruit)) 4.6 雷达坐标系ec_radar 仅用于series.type为radar series.tooltip 仅在 tooltip.trigger 为 ‘item’ 时有效。 series-radar.data.value项数组是具体的数据，每个值跟radar.indicator 一一对应，所以需要提前配置radar.indicator。雷达图的数据是多变量（维度）的，如下示例： data : [ { value : [4300, 10000, 28000, 35000, 50000, 19000], name : &#39;预算分配（Allocated Budget）&#39; }, { value : [5000, 14000, 28000, 31000, 42000, 21000], name : &#39;实际开销（Actual Spending）&#39; } ] echart() %&gt;% ec_legend(show =TRUE) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_radar( indicator = list( list(name = &#39;Mon&#39;, max = 100), list(name = &#39;Tues&#39;, max = 100), list(name = &#39;Wed&#39;, max = 100), list(name = &#39;Thurs&#39;, max = 100), list(name = &#39;Fri&#39;, max = 100), list(name = &#39;Sat&#39;, max = 100), list(name = &#39;Sun&#39;, max = 100) ) ) %&gt;% ec_add_series( data = dat, type = &quot;radar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 4.7 平行坐标系ec_parallel 仅用于series.type为parallel，平行坐标系中的坐标轴为ec_parallelAxis。 平行坐标系数据中，每一行是一个『数据项』，每一列属于一个『维度』，如下示例： data: [ [1, 55, 9, 56, 0.46, 18, 6, &#39;良&#39;], [2, 25, 11, 21, 0.65, 34, 9, &#39;优&#39;], [3, 56, 7, 63, 0.3, 14, 5, &#39;良&#39;], [4, 33, 7, 29, 0.33, 16, 6, &#39;优&#39;], { // 数据项也可以是 Object，从而里面能含有对线条的特殊设置。 value: [5, 42, 24, 44, 0.76, 40, 16, &#39;优&#39;] lineStyle: {...}, } ... ] radar和parallel的数据格式的区别只是，parallel支持字符类型，radar只支持数值。另外parallel.data.name不是系列名称，所以一般不填写，而radar.data.name是系列名称，一般要填写。 echart() %&gt;% ec_legend( data = list(&#39;Apple&#39;, &#39;Pear&#39;, &#39;Banana&#39;)) %&gt;% ec_parallel( left = &#39;5%&#39;, right = &#39;13%&#39;, bottom = &#39;10%&#39;, top = &#39;20%&#39;, parallelAxisDefault = list( type = &#39;value&#39;, nameLocation = &#39;end&#39;, nameGap = 20)) %&gt;% ec_parallelAxis( list(dim = 0, name = &#39;Mon&#39;), list(dim = 1, name = &#39;Tues&#39;), list(dim = 2, name = &#39;Wed&#39;), list(dim = 3, name = &#39;Thurs&#39;), list(dim = 4, name = &#39;Fri&#39;), list(dim = 5, name = &#39;Sat&#39;), list(dim = 6, name = &#39;Sun&#39;) ) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_add_series( data = dat, type = &quot;parallel&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 4.8 单轴坐标系ec_singleAxis echart() %&gt;% ec_title( textBaseline = &#39;middle&#39;, top = &quot;50%&quot;, text = &quot;Apple&quot;) %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_singleAxis( left = 80, type = &#39;category&#39;, boundaryGap = FALSE, top = 60, bottom = 60, splitLine = list( show = TRUE, lineStyle = list( color = &#39;#999&#39;, type = &#39;dashed&#39;)), axisLine = list(show = FALSE)) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Apple&#39;), type = &quot;scatter&quot;, coordinateSystem = &#39;singleAxis&#39;, mapping = ecaes(x = weekDay, y = saleNum, size = price)) opt_title &lt;- lapply(0:2, function(x){ list( id = x, textBaseline = &#39;middle&#39;, top = paste0((x + 0.5) * 100 / 3, &#39;%&#39;), text = c(&quot;Apple&quot;,&quot;Pear&quot;,&quot;Banana&quot;)[x + 1] ) }) opt_singleAxis &lt;- lapply(0:2, function(x){ list( id = x, left = 80, type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;), boundaryGap = FALSE, top = paste0(x * 100/3 + 5, &#39;%&#39;), height = paste0(100/3 - 10, &#39;%&#39;), splitLine = list( show = TRUE, lineStyle = list( color = &#39;#999&#39;, type = &#39;dashed&#39; )), axisLine = list(show = FALSE) ) }) echart() %&gt;% ec_title(opt_title) %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_singleAxis(opt_singleAxis) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Apple&#39;), type = &quot;scatter&quot;, coordinateSystem = &#39;singleAxis&#39;, singleAxisIndex = 0, mapping = ecaes(x = weekDay, y = saleNum, size = price)) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Pear&#39;), type = &quot;scatter&quot;, coordinateSystem = &#39;singleAxis&#39;, singleAxisIndex = 1, mapping = ecaes(x = weekDay, y = saleNum, size = price)) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Banana&#39;), type = &quot;scatter&quot;, coordinateSystem = &#39;singleAxis&#39;, singleAxisIndex = 2, mapping = ecaes(x = weekDay, y = saleNum, size = price)) 4.9 日历坐标系ec_calendar echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_visualMap( min = 0, max = 1000, type = &#39;piecewise&#39;, left = &#39;center&#39;, top = 30, orient = &#39;horizontal&#39; ) %&gt;% ec_calendar( top = 120, left = 30, right = 30, cellSize = c(&#39;auto&#39;, 20), range = c(&#39;2017&#39;) # range = c(&#39;2017-01-01&#39;, &#39;2017-06-10&#39;) ) %&gt;% ec_add_series( type = &#39;heatmap&#39;, coordinateSystem = &#39;calendar&#39;, data = dat_date, mapping = ecaes(x = date, y = value)) 4.10 地理坐标系ec_geo # 获取空气质量数据 # http://datacenter.mep.gov.cn/index # http://pm25.in # https://www.zq12369.com library(rvest) library(XML) library(RCurl) library(jsonlite) library(httr) url &lt;-&#39;https://www.zq12369.com/environment.php?order=desc&amp;tab=rank&#39; htmlCode &lt;- getURL(url) d &lt;- htmlParse(htmlCode, encoding = &#39;utf-8&#39;) xpath &lt;- &#39;//*[@id=&quot;rank1&quot;]//table&#39; line_node &lt;- getNodeSet(d, xpath) line_table &lt;- readHTMLTable(line_node[[1]], header=T) line_table &lt;- line_table[-1,] rownames(line_table) &lt;- NULL # 经纬度 GPS &lt;- function(chr){ url &lt;- paste0(&quot;http://apis.map.qq.com/ws/geocoder/v1/?address=&quot;, chr, &quot;&amp;key=Z2LBZ-YEOCD-RHS46-HNHPJ-ULHLZ-ABFT3&quot;) gps &lt;- lapply(url, function(x){ ## 并发限制：5次/秒/接口/Key Sys.sleep(0.25) fromJSON(rawToChar(GET(x)$content))$result$location }) gps } location &lt;- do.call(rbind.data.frame, GPS(line_table$城市)) AQI &lt;- line_table %&gt;% select(-降序) %&gt;% mutate(lng = as.character(location$lng), lat = as.character(location$lat)) echart() %&gt;% ec_backgroundColor(c(&#39;#404a59&#39;)) %&gt;% ec_legend( show = TRUE, left = &#39;right&#39;, top = &#39;bottom&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_title( text = &quot;全国主要城市空气质量&quot;, subtext = &quot;data from 真气网&quot;, left = &#39;center&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = htmlwidgets::JS(&quot;function (params) {return params.name + &#39; : &#39; + params.value[2];}&quot;)) %&gt;% ec_visualMap( min = 0, max = 200, calculable = TRUE, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;), textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_geo( map = &#39;china&#39;, label = list( emphasis = list(show = FALSE)), itemStyle = list( normal = list( areaColor = &#39;#323c48&#39;, borderColor = &#39;#111&#39;), emphasis = list(areaColor = &#39;#2a333d&#39;))) %&gt;% ec_add_series( type = &#39;scatter&#39;, coordinateSystem = &#39;geo&#39;, data = dat_geo, name = &#39;AQI&#39;, mapping = ecaes(name = 城市, x = lng, y = lat, value = AQI)) 4.11 series.data 系列中的数据内容数组。数组项通常为具体的数据项。 注意，如果系列没有指定data，并且option有dataset，那么默认使用第一个dataset。如果指定了data，则不会再使用dataset。后续详细介绍dataset，本节主要介绍series中的data 通常来说，数据用一个二维数组表示。如下，每一列被称为一个『维度』 series: [{ data: [ // 维度X 维度Y 其他维度 ... [ 3.4, 4.5, 15, 43], [ 4.2, 2.3, 20, 91], [ 10.8, 9.5, 30, 18], [ 7.2, 8.8, 18, 57] ] }] opt_dat &lt;- dat %&gt;% select(weekDay, saleNum, fruit, price) %&gt;% setNames(NULL) %&gt;% jsonlite::toJSON() # as.matrix() 也可以转为matrix，但是若存在列类型为字符，则数值也会转为字符，会存在潜在的影响，建议转为json。 opt_tmp = list( xAxis = list( type = &quot;category&quot;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)), yAxis = list(type = &quot;value&quot;), series = list(type = &#39;scatter&#39;, data = opt_dat)) echart(opt_tmp) 在 直角坐标系 (grid) 中『维度X』和『维度Y』会默认对应于 xAxis 和 yAxis。 在 极坐标系 (polar) 中『维度X』和『维度Y』会默认对应于 radiusAxis 和 angleAxis。 后面的其他维度是可选的，可以在别处被使用，例如： 在 visualMap 中可以将一个或多个维度映射到颜色，大小等多个图形属性上。 在 series.symbolSize 中可以使用回调函数，基于某个维度得到 symbolSize 值。 使用 tooltip.formatter 或 series.label.formatter 可以把其他维度的值展示出来。 特别地，当只有一个轴为类目轴（axis.type 为 ‘category’）的时候，数据可以简化用一个一维数组表示。例如： xAxis: { data: [&#39;a&#39;, &#39;b&#39;, &#39;m&#39;, &#39;n&#39;] }, series: [{ // 与 xAxis.data 一一对应。 data: [23, 44, 55, 19] // 它其实是下面这种形式的简化： // data: [[0, 23], [1, 44], [2, 55], [3, 19]] }] dat_tmp_y &lt;- c(12, 5, 20, 36, 10, 10, 20) dat_tmp &lt;- data.frame(x = c(0:6), y = dat_tmp_y) %&gt;% setNames(NULL) %&gt;% jsonlite::toJSON() opt_tmp = list( xAxis = list( type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)), yAxis = list(type = &quot;value&quot;), series = list( type = &#39;line&#39;, # data = dat_tmp_y 是dat_tmp的简化 data = dat_tmp)) echart(opt_tmp) 『值』与 轴类型 的关系： 当某维度对应于数值轴（axis.type为'value'或者'log'）的时候：其值可以为number（例如 12）。（也可以兼容string形式的number，例如 ‘12’） 当某维度对应于类目轴（axis.type为'category'）的时候：其值须为类目的『序数』（从0 开始）或者类目的『字符串值』。例如： 其值须为类目的『序数』（从 0 开始）或者类目的『字符串值』。例如： xAxis: { type: &#39;category&#39;, data: [&#39;星期一&#39;, &#39;星期二&#39;, &#39;星期三&#39;, &#39;星期四&#39;] }, yAxis: { type: &#39;category&#39;, data: [&#39;a&#39;, &#39;b&#39;, &#39;m&#39;, &#39;n&#39;, &#39;p&#39;, &#39;q&#39;] }, series: [{ data: [ // xAxis yAxis [0, 0, 2], // 意思是此点位于 xAxis: &#39;星期一&#39;, yAxis: &#39;a&#39;。 [&#39;星期四&#39;, 2, 1], // 意思是此点位于 xAxis: &#39;星期四&#39;, yAxis: &#39;m&#39;。 [2, &#39;p&#39;, 2], // 意思是此点位于 xAxis: &#39;星期三&#39;, yAxis: &#39;p&#39;。 [3, 3, 5] ] }] 当某维度对应于时间轴（type 为'time'）的时候，值可以为： - 一个时间戳，如 1484141700832，表示 UTC 时间。 - 或者字符串形式的时间描述： - ISO 8601 的子集，只包含这些形式（这几种格式，除非指明时区，否则均表示本地时间，与 moment 一致）： - 部分年月日时间: ‘2012-03’, ‘2012-03-01’, ‘2012-03-01 05’, ‘2012-03-01 05:06’. - 使用 ‘T’ 或空格分割: ‘2012-03-01T12:22:33.123’, ‘2012-03-01 12:22:33.123’. - 时区设定: ‘2012-03-01T12:22:33Z’, ‘2012-03-01T12:22:33+8000’, ‘2012-03-01T12:22:33-05:00’. - 其他的时间字符串，包括（均表示本地时间）: ‘2012’, ‘2012-3-1’, ‘2012/3/1’, ‘2012/03/01’, ‘2009/6/12 2:00’, ‘2009/6/12 2:05:08’, ‘2009/6/12 2:05:08.123’ - 或者用户自行初始化的 Date 实例： - 注意，用户自行初始化 Date 实例的时候，浏览器的行为有差异，不同字符串的表示也不同。 - 例如：在 chrome 中，new Date(‘2012-01-01’) 表示 UTC 时间的 2012 年 1 月 1 日，而 new Date(‘2012-1-1’) 和 new Date(‘2012/01/01’) 表示本地时间的 2012 年 1 月 1 日。在 safari 中，不支持 new Date(‘2012-1-1’) 这种表示方法。 - 所以，使用 new Date(dataString) 时，可使用第三方库解析（如 moment），或者使用 echarts.number.parseDate，或者参见 这里。 # datetime_to_timestamp &lt;- function(dt) { # assertthat::assert_that(assertthat::is.date(dt) | assertthat::is.time(dt)) # tmstmp &lt;- as.numeric(as.POSIXct(dt)) # tmstmp &lt;- 1000 * tmstmp # tmstmp # } dat_tmp &lt;- dat_date %&gt;% mutate(date = datetime_to_timestamp(date)) %&gt;% setNames(NULL) %&gt;% jsonlite::toJSON() opt_tmp = list( xAxis = list( type = &#39;time&#39;), yAxis = list(type = &quot;value&quot;), series = list( type = &#39;line&#39;, data = dat_tmp)) echart(opt_tmp) 空值： 当某数据不存在时（ps：不存在不代表值为 0），可以用 ‘-’ 或者 null 或者 undefined 或者 NaN 表示。 例如，无数据在折线图中可表现为该点是断开的，在其它图中可表示为图形不存在。 4.12 数据集: ec_dataset 支持的图表类型: line, bar, scatter, effectScatter, boxplot, candlestick, pictorialBar, custom 4.12.1 id 如果 series.data 没有指定，并且 dataset 存在，那么就会使用 dataset。datasetIndex 指定本系列使用那个 dataset，需要注意的是：datasetIndex并不是dataset.id的值，而是dataset的从0开始序列值。 4.12.2 source/data dataset.source 暂时只支持data.frame，matrix和json三种数据格式。 如果是导入的数据合适为json，ec_dataset会直接取用该数据，并且默认dimensions = NULL。否则会通过source = jsonlite::toJSON(setNames(data, NULL))转为json，并且默认dimensions = colnames(data)。 另外可以通过data或source两种参数传入数据，若同时含有这两个参数，则取source数据。 4.12.3 dimensions dataset.dimensions 使用 dimensions 定义 dataset.source 的每个维度的信息。如果不设定 dimensions ，若导入的数据格式是data.frame，则默认为colnames(data)，若导入的数据格式是json，则默认为NULL。 注意：如果使用了 dataset，那么可以在 dataset.source 的第一行/列中给出 dimension 名称。于是就不用在这里指定 dimension。但是，如果在这里指定了 dimensions，那么 echarts 不再会自动从 dataset.source 的第一行/列中获取维度信息。 目前发现一个问题，即使在dataset指定了 dimensions ，如果 dataset.source 的数据为字符型，echarts 虽然不会自动从 dataset.source 的第一行/列中获取维度信息，但是还会默认 dataset.source 的第一行/列为维度信息，不取第一行/列的值。 4.12.4 sourceHeader 默认sourceHeader = FALSE，即第一行/列直接开始是数据。 4.12.5 encode 用于可以定义 data 的哪个维度被编码成什么。 encode 支持的属性，根据坐标系不同而不同。 对于 直角坐标系（cartesian2d），支持 x、y。 对于 极坐标系（polar），支持 radius、angle。 对于 地理坐标系（geo），支持 lng，lat。 此外，均支持 tooltip 和 itemName（用于指定 tooltip 中数据项名称）。 当使用 dimensions 给维度定义名称后，encode 中可直接引用名称 dat_fruit_sp &lt;- dat %&gt;% select(fruit, weekDay, saleNum) %&gt;% spread(fruit, saleNum) %&gt;% arrange(match(weekDay, weekDays)) echart() %&gt;% ec_title(text = &#39;水果销量&#39;) %&gt;% ec_xAxis(type = &#39;category&#39;, data = weekDays) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_dataset(data = dat_fruit_sp) %&gt;% ec_dataset(source = jsonlite::toJSON(dat_fruit_sp), id = 1) %&gt;% ec_dataset(source = as.matrix(dat_fruit_sp), id = 5) %&gt;% ec_add_series( name = &quot;Apple&quot;, type = &#39;line&#39;, encode = list(y = &quot;Apple&quot;)) %&gt;% ec_add_series( name = &quot;Banana&quot;, datasetIndex = 1, type = &#39;line&#39;, encode = list(x = &quot;weekDay&quot;, y = 2)) %&gt;% ec_add_series( datasetIndex = 2, type = &#39;line&#39;, encode = list(x = 0, y = 3, seriesName = 3, tooltip = c(0, 3))) 4.13 ec_add_series ## 目前支持下列两种方式 mapping = ecaes(name = dat$weekDay, value = dat$saleNum, group = dat$fruit) mapping = ecaes(name = weekDay, value = saleNum, group = fruit) mapping = ecaes(x = dat$weekDay, y = dat$saleNum, group = fruit) mapping = ecaes(x = weekDay, y = saleNum, group = fruit) ## 暂不支持下列方式 # mapping = ecaes(name = ~weekDay, value = ~saleNum, group = ~fruit) echart() %&gt;% ec_add_series( data = dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, symbolSize = price)) 4.13.1 ec_add_series.default echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 4.13.2 ec_add_series.data.frame echart() %&gt;% ec_add_series( data = filter(dat, fruit %in% c(&#39;Apple&#39;, &#39;Pear&#39;)), type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Banana&#39;), type = &quot;line&quot;, name = &#39;Banana&#39;, mapping = ecaes(x = weekDay, y = saleNum)) %&gt;% ec_legend(show = TRUE) echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_legend(show = TRUE) %&gt;% ec_xAxis( data = list(list( value = &#39;Mon&#39;, textStyle = list(color = &#39;red&#39;)), &#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) echart() %&gt;% ec_add_series( data = dat_date, type = &quot;line&quot;, mapping = ecaes(x = date, y = value)) 4.13.3 ec_add_series.numeric 不需要设置mapping echarts没有xAxis的情况 dat_numeric &lt;- round(runif(20, 0, 10), 0) echart() %&gt;% ec_add_series( data = dat_numeric, type = &#39;bar&#39;) echarts提前设置xAxis的情况 echart() %&gt;% ec_xAxis( type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_add_series( type = &#39;line&#39;, name = &#39;Pear&#39;, data = c(15, 15, 25, 16, 20, 16, 22)) 4.13.4 ec_add_series.character 不需要设置mapping echart() %&gt;% ec_add_series( data = dat$fruit, type = &#39;bar&#39;) 4.13.5 ec_add_series.ts echart() %&gt;% ec_add_series( data = LakeHuron, type = &quot;line&quot;) %&gt;% ec_yAxis(min = &#39;dataMin&#39;) 4.13.6 ec_add_series.forecast library(&quot;forecast&quot;) dat_forecast &lt;- forecast(ets(USAccDeaths), h = 48, level = 95) echart() %&gt;% ec_add_series(dat_forecast, addOriginal = TRUE, addLevels = TRUE) 4.14 全局设置echarter.option ec_option &lt;- getOption(&quot;echarter.option&quot;) ec_option$legend &lt;- list() options(echarter.option = ec_option) "],
["echarter.html", "第 5 章 echarter 5.1 Data Frames 5.2 Numeric &amp; Histograms 5.3 Densities 5.4 Character &amp; Factor 5.5 Time Series 5.6 Seasonal Decomposition of Time Series by Loess 5.7 Forecast package 5.8 igraph 5.9 xts from quantmod package 5.10 xts ohlc objects 5.11 Autocovariance &amp; Autocorrelation 5.12 Multivariate Time series 5.13 Survival Models 5.14 Principal Components 5.15 Matrix 5.16 Distance matrix 5.17 Correlation matrix", " 第 5 章 echarter echarter 可以根据数据类型，快速的绘制echarts. 目前支持的数据类型有: data.frame, numeric, histogram, character, factor, ts, mts, xts (and OHLC), forecast, acf, dist. 5.1 Data Frames library(tidyverse) library(echarter) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;),3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) echarter( dat, type = &quot;line&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_title(text = &quot;Fruit Salse&quot;) %&gt;% ec_xAxis(nameLocation = &quot;center&quot;, nameGap = 30) %&gt;% ec_yAxis(nameLocation = &quot;center&quot;, nameGap = 30) 5.2 Numeric &amp; Histograms 5.3 Densities 5.4 Character &amp; Factor 5.5 Time Series 5.6 Seasonal Decomposition of Time Series by Loess 5.7 Forecast package 5.8 igraph 5.9 xts from quantmod package 5.10 xts ohlc objects 5.11 Autocovariance &amp; Autocorrelation 5.12 Multivariate Time series 5.13 Survival Models 5.14 Principal Components 5.15 Matrix 5.16 Distance matrix 5.17 Correlation matrix "],
["theme.html", "第 6 章 theme 6.1 演示数据 6.2 dark 6.3 infographic 6.4 macarons 6.5 roma 6.6 shine 6.7 vintage 6.8 自定义js主题 6.9 自定义ec_theme 6.10 自定义echarter.option", " 第 6 章 theme 6.1 演示数据 library(tidyverse) library(echarter) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;),3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) 自带的theme: dark, infographic, macarons, roma, shine, vintage. 6.2 dark echart(theme = &#39;dark&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.3 infographic echart(theme = &#39;infographic&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.4 macarons echart(theme = &#39;macarons&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.5 roma echart(theme = &#39;roma&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.6 shine echart(theme = &#39;shine&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.7 vintage echart(theme = &#39;vintage&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.8 自定义js主题 echarts theme 构建工具: http://echarts.baidu.com/theme-builder/ 支持绝对路径和相对路径 echart(theme = &#39;data/star.js&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.9 自定义ec_theme 现通过ec_theme构建主题，再通过echart(theme = thm)导入。 thm_ &lt;- list( color = c(&#39;#247BA0&#39;,&#39;#70C1B3&#39;,&#39;#B2DBBF&#39;,&#39;#F3FFBD&#39;,&#39;#FF1654&#39;), backgroundColor = &#39;#24273e&#39;, title = list( textStyle = list( color = &#39;#ffffff&#39; ), subtextStyle = list( color = &#39;#dddddd&#39; ) ), legend = list( textStyle = list( color = &#39;#dddddd&#39; ) ), xAxis = list( splitLine = list( show = FALSE ), axisLine = list( lineStyle = list( color = &#39;#dddddd&#39; ) ), axisTick = list( lineStyle = list( color = &#39;#dddddd&#39; ) ), axisLabel = list( lineStyle = list( color = &#39;#dddddd&#39; ) ) ), yAxis = list( splitLine = list( show = FALSE ), axisLine = list( lineStyle = list( color = &#39;#dddddd&#39; ) ), axisTick = list( lineStyle = list( color = &#39;#dddddd&#39; ) ), axisLabel = list( lineStyle = list( color = &#39;#dddddd&#39; ) ) ), toolbox = list( iconStyle = list( borderColor = &#39;#dddddd&#39; ) ) ) thm &lt;- ec_theme(thm_) echart(theme) echart(theme = thm) %&gt;% ec_xAxis( type = &#39;category&#39;) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 6.10 自定义echarter.option ec_opt_default &lt;- getOption(&quot;echarter.option&quot;) options(echarter.option = thm_) echart() %&gt;% ec_xAxis( type = &#39;category&#39;, data = c(&#39;周一&#39;,&#39;周二&#39;,&#39;周三&#39;,&#39;周四&#39;,&#39;周五&#39;,&#39;周六&#39;,&#39;周日&#39;)) %&gt;% ec_yAxis(type = &#39;value&#39;) %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(name = weekDay, value = saleNum, group = fruit)) ## 还原 options(echarter.option = ec_opt_default) "],
["basic.html", "第 7 章 基本图表 7.1 基本图表类型 7.2 坐标系coordinateSystem 7.3 演示数据 7.4 折线图line 7.5 柱状图bar 7.6 饼图pie 7.7 散点图scatter 7.8 带特效散点图effectScatter 7.9 盒须图/箱线图boxplot 7.10 k线图candlestick 7.11 象形柱图pictorialBar 7.12 线图lines 7.13 热力图heatmap 7.14 主题河流图themeRiver 7.15 雷达图radar 7.16 平行坐标系parallel 7.17 地图map 7.18 漏斗图funnel 7.19 仪表盘gauge 7.20 树图tree 7.21 矩形树图treemap 7.22 旭日图sunburst 7.23 - 桑基图sankey 7.24 - 关系图graph 7.25 组合", " 第 7 章 基本图表 7.1 基本图表类型 ECharts 提供了常规的折线图line、柱状图bar、散点图scatter、饼图pie、雷达图radar、热力图heatmap用于统计的箱线图boxplot，用于多个状态直接流转分析的桑基图sankey，，用于地理数据可视化的地图map、热力地图heatmap、线图lines，用于金融市场分析的K线图candlestick，用于关系数据可视化的关系图graph、树图tree、树状图treemap、旭日图sunburst，多维数据可视化的平行坐标图parallel，还有用于BI的漏斗图funnel，仪表盘guage，并且支持图与图之间的混搭。 7.2 坐标系coordinateSystem 二维的直角坐标系cartesian2d，默认为空 极坐标系polar 平行坐标系parallel 单轴坐标系singleAxis 地理坐标系geo 日历坐标系calendar 雷达坐标系radar 不使用坐标系none 7.3 演示数据 library(echarter) library(lubridate) library(tidyverse) weekDays &lt;- c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(weekDays, 3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) dat_groupby_weekDay &lt;- dat %&gt;% group_by(weekDay) %&gt;% summarise( saleNum = sum(saleNum), price = round(mean(price),2)) dat_groupby_fruit &lt;- dat %&gt;% group_by(fruit) %&gt;% summarise( saleNum = sum(saleNum), price = round(mean(price),2)) dat_date &lt;- data.frame( date = as.Date(&#39;2017-01-01&#39;) + seq(0,364), value = round(runif(365, 0, 1000), 0), stringsAsFactors = FALSE) AQI &lt;- read.csv(&quot;data/AQI.csv&quot;, stringsAsFactors = FALSE) dat_geo &lt;- AQI %&gt;% select(城市, lng, lat, AQI) dat_geo_lines &lt;- dat_geo %&gt;% select(start = 城市, start.lng = lng, start.lat = lat, value = AQI) %&gt;% filter(start != &quot;北京&quot;) %&gt;% filter(start != &quot;上海&quot;) dat_geo_lines$end &lt;- rep(c(&quot;北京&quot;, &quot;上海&quot;), 50)[1:nrow(dat_geo_lines)] dat_geo_lines &lt;- dat_geo_lines %&gt;% left_join( select(dat_geo, end = 城市, end.lng = lng, end.lat = lat), by = c(&quot;end&quot; = &quot;end&quot;)) dat_boxplot &lt;- data.frame( Uni05 = (1:100)/21, Norm = rnorm(100), Rt = rt(100, df = 5), Gam2 = rgamma(100, shape = 2), Runif = runif(100, -5, 5)) dat_tree &lt;- data.frame( parent = c(&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;,&quot;c&quot;,&quot;m&quot;,&quot;n&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;), child = c(&quot;b&quot;,&quot;c&quot;,&quot;d&quot;,&quot;e&quot;,&quot;f&quot;,&quot;g&quot;,&quot;h&quot;,&quot;i&quot;,&quot;o&quot;,&quot;p&quot;,&quot;q&quot;,&quot;r&quot;,&quot;s&quot;), value = c(20,10,3,7,1,2,3,4,15,5,5,5,5), stringsAsFactors = FALSE) opt &lt;- list( xAxis = list(type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)), yAxis = list(type = &#39;value&#39;)) 7.4 折线图line 基础折线图 堆叠折线图 光滑曲线图 区域图 堆叠区域图 阶梯线图 极坐标双数值轴 7.4.1 基础折线图 echart() %&gt;% ec_legend(show = TRUE) %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 需要注意的是，即使提前设置 xAxis.data，echarts在绘制line图时，是根据series.data或者dataset.source的序列绘制的，而不是根据xAxis.data的序列。两者序列不一致，则会出现下列情况。 dat_chaos &lt;- arrange(dat, weekDay) echart() %&gt;% ec_xAxis(data = weekDays) %&gt;% ec_add_series( data = dat_chaos, type = &quot;line&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 日期格式的数据，建议使用Axis.time，可以自动处理空数据和坐标长度 ## 建议目前版本设置Axis.interval，否则坐标轴线与图之间有错位 ## Axis.time的boundaryGap设置问题，需要设置min=NULL,max=NUL ## 参考：https://github.com/ecomfe/echarts/issues/4532#issuecomment-267804213 echart() %&gt;% ec_add_series( data = head(dat_date, 10), type = &#39;line&#39;, mapping = ecaes(x = date, y = value)) %&gt;% ec_xAxis( type = &#39;time&#39;, boundaryGap = c(&#39;0.1%&#39;,&#39;0.1%&#39;), min = NULL, max = NULL, interval = 3600 * 24 * 1000, maxInterval = 3600 * 24 * 1000) 7.4.2 堆叠折线图 详见：series-line.stack echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, stack = &#39;水果&#39;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.4.3 光滑曲线图 详见：series-line.smooth echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, smooth = TRUE, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.4.4 区域图 详见：series-line.areaStyle echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, areaStyle = list(), mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.4.5 堆叠区域图 echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, stack = &#39;水果&#39;, areaStyle = list(), mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.4.6 阶梯线图 详见：series-line.step echart() %&gt;% ec_add_series( data = dat, type = &quot;line&quot;, step = &#39;end&#39;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.4.7 极坐标双数值轴 echart() %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_polar( center = c(&#39;50%&#39;, &#39;50%&#39;)) %&gt;% ec_angleAxis( type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;), boundaryGap = FALSE, splitLine = list( show = TRUE, lineStyle = list( color = &#39;#999&#39;, type = &#39;dashed&#39; )), axisLine =list(show = FALSE)) %&gt;% ec_radiusAxis(type = &#39;value&#39;) %&gt;% ec_add_series( type = &quot;line&quot;, coordinateSystem = &#39;polar&#39;, data = dat, mapping = ecaes(name = weekDay, value = saleNum, group = fruit)) 7.5 柱状图bar 7.5.1 基础柱状图 echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.5.2 堆叠柱状图 echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, stack = &#39;水果&#39;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.5.3 条形图 echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, mapping = ecaes(y = weekDay, x = saleNum, group = fruit)) 7.5.4 堆叠条形图 echart() %&gt;% ec_add_series( data = dat, type = &quot;bar&quot;, stack = &#39;水果&#39;, mapping = ecaes(y = weekDay, x = saleNum, group = fruit)) 7.5.5 极坐标柱状图 echart() %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_polar( center = c(&#39;50%&#39;, &#39;50%&#39;)) %&gt;% ec_angleAxis( type = &#39;category&#39;, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;), boundaryGap = FALSE, splitLine = list( show = TRUE, lineStyle = list( color = &#39;#999&#39;, type = &#39;dashed&#39; )), axisLine =list(show = FALSE) ) %&gt;% ec_radiusAxis(type = &#39;value&#39;) %&gt;% ec_add_series( type = &quot;bar&quot;, stack = &#39;水果&#39;, coordinateSystem = &#39;polar&#39;, data = dat, mapping = ecaes(name = weekDay, value = saleNum, group = fruit)) 7.6 饼图pie data: [{ name: &#39;数据1&#39;, value: 10 }, { // 数据项名称 name: &#39;数据2&#39;, value : 56, //自定义特殊 tooltip，仅对该数据项有效 tooltip:{}, //自定义特殊itemStyle，仅对该item有效 itemStyle:{} }] 对应mapping的设置为：ecaes(name,value) 7.6.1 基础饼图 echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, mapping = ecaes(name = weekDay, value = saleNum)) 7.6.2 环行图 echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, radius = list(&#39;20%&#39;, &#39;40%&#39;), center = list(&#39;25%&#39;, &#39;50%&#39;), mapping = ecaes(name=weekDay, value=saleNum)) %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, radius = list(40, 60), center = list(&#39;75%&#39;, &#39;50%&#39;), mapping = ecaes(name=weekDay, value=saleNum)) 7.6.3 嵌套环形图 echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, radius = list(&#39;0%&#39;, &#39;40%&#39;), label = list(normal = list(position=&#39;inner&#39;)), mapping = ecaes(name=weekDay, value=price)) %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, radius = list(&#39;50%&#39;, &#39;70%&#39;), mapping = ecaes(name=weekDay, value=saleNum)) 7.6.4 玫瑰图 echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, roseType = &#39;radius&#39;, center = list(&#39;25%&#39;, &#39;50%&#39;), radius = list(0,&#39;45%&#39;), mapping = ecaes(name=weekDay, value=saleNum)) %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;pie&#39;, roseType = &#39;area&#39;, center = list(&#39;75%&#39;, &#39;50%&#39;), radius = list(0,&#39;45%&#39;), mapping = ecaes(name=weekDay, value=saleNum)) 7.7 散点图scatter 7.7.1 基本散点图 echart() %&gt;% ec_add_series( data = dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.7.2 气泡图Bubble echart() %&gt;% ec_add_series( data = dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit, size = price)) 7.7.3 地理散点图 echart() %&gt;% ec_backgroundColor(c(&#39;#404a59&#39;)) %&gt;% ec_legend( show = TRUE, left = &#39;right&#39;, top = &#39;bottom&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_title( text = &quot;全国主要城市空气质量&quot;, subtext = &quot;data from 真气网&quot;, left = &#39;center&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = htmlwidgets::JS(&quot;function (params) {return params.name + &#39; : &#39; + params.value[2];}&quot;)) %&gt;% ec_visualMap( min = 0, max = 200, calculable = TRUE, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;), textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_geo( map = &#39;china&#39;, label = list( emphasis = list(show = FALSE)), itemStyle = list( normal = list( areaColor = &#39;#323c48&#39;, borderColor = &#39;#111&#39;), emphasis = list(areaColor = &#39;#2a333d&#39;))) %&gt;% ec_add_series( type = &#39;scatter&#39;, coordinateSystem = &#39;geo&#39;, data = dat_geo, name = &#39;AQI&#39;, mapping = ecaes(x = lng, y = lat, value = AQI)) 7.8 带特效散点图effectScatter echart() %&gt;% ec_add_series( data = dat, type = &quot;effectScatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.9 盒须图/箱线图boxplot ECharts并不内置对原始数据的处理，输入给boxplot的数据须是五个统计结果量值，五个量值依次是：[min, Q1, median (or Q2), Q3, max]。 mapping = ecaes(min, Q1, median (or Q2), Q3, max)。 若mapping不为空，这根据mapping指定的五个量值绘制boxplot。 若mapping为空，则根据graphics::boxplot统计出五个量值后绘制boxplot，并且根据outline判断是否绘制outline，若outline == TRUE则绘制outline，若outline == FALSE则绘制不绘制outline，默认为TRUE。 # boxplot(dat_boxplot) dat_bp &lt;- boxplot(dat_boxplot, plot = FALSE) dat_stats &lt;- dat_bp$stats dat_stats_t &lt;- t(dat_stats) dat_stats_t_df &lt;- data.frame(dat_stats_t) names(dat_stats_t_df) &lt;- c(&quot;min&quot;, &quot;Q1&quot;, &quot;median&quot;, &quot;Q3&quot;, &quot;max&quot;) dat_out &lt;- data.frame( group = dat_bp$group - 1, out = dat_bp$out, stringsAsFactors = FALSE) # matrix echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_add_series( data = dat_stats_t, type = &quot;boxplot&quot;) # data.frame echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_add_series( data = dat_stats_t_df, type = &quot;boxplot&quot;, mapping = ecaes(min = min, Q1 = Q1, median = median, Q3 = Q3, max = max)) layout布局方式，可选值： horizontal：水平排布各个 box vertical：竖直排布各个 box 默认值根据当前坐标系状况决定：如果category轴为横轴，则水平排布；否则竖直排布；如果没有category轴则水平排布。 echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_stats_t_df, type = &quot;boxplot&quot;, mapping = ecaes(min = min, Q1 = Q1, median = median, Q3 = Q3, max = max)) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_out, type = &quot;scatter&quot;, mapping = ecaes(x = group, y = out)) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_yAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_xAxis(type = &quot;value&quot;) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_stats_t_df, type = &quot;boxplot&quot;, mapping = ecaes(min = min, Q1 = Q1, median = median, Q3 = Q3, max = max)) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_out, type = &quot;scatter&quot;, mapping = ecaes(y = group, x = out)) horizontal和vertical echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_legend(show = TRUE) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_boxplot, type = &quot;boxplot&quot;, outline = TRUE, layout = &#39;horizontal&#39;) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_yAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_xAxis(type = &quot;value&quot;) %&gt;% ec_add_series( name = &quot;boxplot&quot;, data = dat_boxplot, type = &quot;boxplot&quot;, outline = TRUE, layout = &#39;vertical&#39;) dat_boxplot_ &lt;- data.frame( Uni05 = (1:100)/21, Norm = rnorm(100), Rt = rt(100, df = 5), Gam2 = rgamma(100, shape = 2), Runif = runif(100, -5, 5)) dat_boxplot2 &lt;- rbind(mutate(dat_boxplot, index = &quot;data1&quot;), mutate(dat_boxplot_, index = &quot;data2&quot;)) dat_boxplot_ &lt;- data.frame( Uni05 = (1:100)/21, Norm = rnorm(100), Rt = rt(100, df = 5), Gam2 = rgamma(100, shape = 2), Runif = runif(100, -5, 5)) dat_boxplot3 &lt;- rbind(dat_boxplot2, mutate(dat_boxplot_, index = &quot;data3&quot;)) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = names(dat_boxplot)) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_legend(show = TRUE) %&gt;% ec_add_series( data = dat_boxplot3, group = &quot;index&quot;, type = &quot;boxplot&quot;, outline = TRUE, layout = &#39;horizontal&#39;) 7.10 k线图candlestick 四个量值依次是：[open, close, lowest, highest] （即：[开盘值, 收盘值, 最低值, 最高值]） 对应mapping的设置为：ecaes(open, close, lowest, highest) getstockdata &lt;- function(code, start, end){ html &lt;- &quot;http://q.stock.sohu.com/hisHq?&quot; url &lt;- paste(html, &quot;code=&quot;, code, &quot;&amp;start=&quot;, start, &quot;&amp;end=&quot;, end, sep=&quot;&quot;) data &lt;- rjson::fromJSON(RCurl::getURL(url, .encoding = &#39;utf-8&#39;))[[1]]$hq result &lt;- data.frame(t(sapply(data, `[`)), stringsAsFactors = FALSE) result_name &lt;- c(&#39;date&#39;,&#39;open&#39;,&#39;close&#39;,&#39;increase&#39;,&#39;increPer&#39;,&#39;low&#39;,&#39;high&#39;,&#39;volume&#39;,&#39;amount&#39;,&#39;other&#39;) names(result) &lt;- result_name result[result_name[c(2:4,6:9)]] &lt;- sapply(result[result_name[c(2:4,6:9)]],as.numeric) return(result) } dat_stock_zs_000001 &lt;- getstockdata(code = &quot;zs_000001&quot;, start = &quot;20150101&quot;, end = format(Sys.Date(),&quot;%Y%m%d&quot;)) %&gt;% arrange(date) %&gt;% mutate(MA5 = round(TTR::SMA(close, 5), 2)) %&gt;% mutate(MA10 = round(TTR::SMA(close, 10), 2)) %&gt;% mutate(MA20 = round(TTR::SMA(close, 20), 2)) %&gt;% mutate(MA30 = round(TTR::SMA(close, 30), 2)) %&gt;% mutate(MA40 = round(TTR::SMA(close, 40), 2)) %&gt;% mutate(MA50 = round(TTR::SMA(close, 50), 2)) %&gt;% mutate(MA6 = round(TTR::SMA(close, 60), 2)) dat_stock_zs_399001 &lt;- getstockdata(code = &quot;zs_399001&quot;, start = &quot;20150101&quot;, end = format(Sys.Date(),&quot;%Y%m%d&quot;)) %&gt;% arrange(date) %&gt;% mutate(MA5 = round(TTR::SMA(close, 5), 2)) %&gt;% mutate(MA10 = round(TTR::SMA(close, 10), 2)) %&gt;% mutate(MA20 = round(TTR::SMA(close, 20), 2)) %&gt;% mutate(MA30 = round(TTR::SMA(close, 30), 2)) %&gt;% mutate(MA40 = round(TTR::SMA(close, 40), 2)) %&gt;% mutate(MA50 = round(TTR::SMA(close, 50), 2)) %&gt;% mutate(MA6 = round(TTR::SMA(close, 60), 2)) # write.csv(dat_stock_zs_000001,&quot;data/dat_stock_zs_000001.csv&quot;, row.names = FALSE) # write.csv(dat_stock_zs_399001,&quot;data/dat_stock_zs_399001.csv&quot;, row.names = FALSE) dat_stock_zs_000001 &lt;- read.csv(&quot;data/dat_stock_zs_000001.csv&quot;, stringsAsFactors = FALSE) %&gt;% tail(100) %&gt;% mutate(code = &quot;上证指数&quot;) dat_stock_zs_399001 &lt;- read.csv(&quot;data/dat_stock_zs_399001.csv&quot;, stringsAsFactors = FALSE) %&gt;% tail(100) %&gt;% mutate(code = &quot;深圳指数&quot;) dat_stock &lt;- rbind(dat_stock_zs_399001, dat_stock_zs_000001) dat_stock_date &lt;- unique(dat_stock$date) dat_stock_v &lt;- dat_stock %&gt;% mutate(increase = ifelse(close &gt;= open, 1, -1)) %&gt;% select(date, volume, increase, code) dat_stock_ &lt;- dat_stock %&gt;% select(open, close, low, high, volume, increase, date) %&gt;% setNames(NULL) %&gt;% as.matrix() upColor &lt;- &#39;#00da3c&#39;; downColor &lt;- &#39;#ec0000&#39;; itemStyle &lt;- list( normal = list( color = downColor, color0 = upColor, borderColor = &quot;#8A0000&quot;, borderColor0 = &quot;#008F28&quot;)) MA_lineStyle = list(normal = list(opacity = 0.5)) echart() %&gt;% ec_title(text = &quot;上证指数&quot;) %&gt;% ec_tooltip(trigger = &#39;axis&#39;, axisPointer = list(type = &quot;cross&quot;)) %&gt;% ec_axisPointer(link = list(xAxisIndex= &#39;all&#39;)) %&gt;% ec_grid( list(left=&#39;10%&#39;,right=&#39;8%&#39;,height=&#39;50%&#39;), list(left=&#39;10%&#39;,right=&#39;8%&#39;,top=&#39;68%&#39;,height=&#39;16%&#39;)) %&gt;% ec_xAxis( list( gridIndex = 0,type = &quot;category&quot;, data = dat_stock_date, scale = TRUE, boundaryGap= FALSE, axisLine=list(onZero=FALSE), splitLine=list(show=FALSE), splitNumber= 20, min=&#39;dataMin&#39;, max= &#39;dataMax&#39;, axisPointer=list(z=100)), list( gridIndex = 1,type = &quot;category&quot;, data = dat_stock_date, scale = TRUE, boundaryGap= FALSE, axisLine=list(onZero=FALSE), splitLine=list(show=FALSE), axisTick=list(show=FALSE), axisLabel=list(show=FALSE), splitNumber= 20, min=&#39;dataMin&#39;, max= &#39;dataMax&#39;, axisPointer=list(z=100))) %&gt;% ec_yAxis( list( gridIndex = 0, type = &quot;value&quot;, scale = TRUE, splitArea = list(show = TRUE)), list( gridIndex = 1, scale = TRUE, gridIndex = 1, splitNumber = 2, axisLabel = list(show = FALSE), axisLine = list(show = FALSE), axisTick = list(show = FALSE), splitLine = list(show = FALSE))) %&gt;% ec_dataZoom( list(type = &#39;inside&#39;,xAxisIndex= c(0,1)), list( type = &#39;slider&#39;,xAxisIndex=c(0,1), show = TRUE, top = &#39;85%&#39;)) %&gt;% ec_legend(show = TRUE) %&gt;% ec_add_series( name = &quot;上证指数&quot;, type = &quot;candlestick&quot;, itemStyle = itemStyle, data = dat_stock_zs_000001, mapping = ecaes(open = open, close = close, lowest = low, highest = high)) %&gt;% ec_add_series( name = &quot;MA10&quot;, type = &quot;line&quot;, lineStyle = MA_lineStyle, symbol = &#39;none&#39;, smooth = TRUE, data = dat_stock_zs_000001$MA10) %&gt;% ec_add_series( name = &quot;MA20&quot;, type = &quot;line&quot;, lineStyle = MA_lineStyle, symbol = &#39;none&#39;, smooth = TRUE, data = dat_stock_zs_000001$MA20) %&gt;% ec_add_series( name = &quot;MA30&quot;, type = &quot;line&quot;, lineStyle = MA_lineStyle, symbol = &#39;none&#39;, smooth = TRUE, data = dat_stock_zs_000001$MA30) %&gt;% # ec_add_series( # xAxisIndex = 1, yAxisIndex = 1, # name = &quot;Volume&quot;, type = &quot;bar&quot;, # data = jsonlite::toJSON(setNames(dat_stock_v, NULL))) %&gt;% ec_add_series( xAxisIndex = 1, yAxisIndex = 1, name = &quot;Volume&quot;, type = &quot;bar&quot;, data = filter(dat_stock_v, code == &quot;上证指数&quot;), mapping = ecaes(x = date, y = volume, increase = increase)) %&gt;% ec_visualMap( type = &quot;piecewise&quot;, show = FALSE, seriesIndex = 4, dimension = 2, pieces = list( list(value = 1, color = downColor), list(value = -1, color = upColor))) %&gt;% ec_mark( markname = &quot;markLine&quot;, symbol = c(&#39;none&#39;, &#39;none&#39;), data = list( list(type = &quot;max&quot;, name = &quot;最大值&quot;, valueDim = &quot;highest&quot;), list(type = &quot;min&quot;, name = &quot;最小值&quot;, valueDim = &quot;lowest&quot;))) echart() %&gt;% ec_title(text = &quot;指数对比&quot;) %&gt;% ec_tooltip(trigger = &#39;axis&#39;, axisPointer = list(type = &quot;cross&quot;)) %&gt;% ec_axisPointer(link = list(xAxisIndex= &#39;all&#39;)) %&gt;% ec_xAxis( type = &quot;category&quot;, data = dat_stock_date, scale = TRUE, boundaryGap= FALSE, axisLine=list(onZero=FALSE), splitLine=list(show=FALSE), splitNumber= 20, min=&#39;dataMin&#39;, max= &#39;dataMax&#39;, axisPointer=list(z=100)) %&gt;% ec_yAxis( type = &quot;value&quot;, scale = TRUE, splitArea = list(show = TRUE)) %&gt;% ec_dataZoom(type = &#39;inside&#39;) %&gt;% ec_add_series( type = &quot;candlestick&quot;, itemStyle = itemStyle, data = dat_stock, mapping = ecaes(open = open, close = close, lowest = low, highest = high, group = code)) 7.10.1 瀑布图waterfall 瀑布图类似于k线图，只是开盘值就是最低值，收盘值就是最高值。形态似瀑布 dat_wf &lt;- data.frame( first = c(0,-21,-10,138,232,222,242), end = c(-21,-10,138,232,222,242,406), stringsAsFactors = FALSE) dat_wf_name &lt;- c(&quot;Mon&quot;,&quot;Tues&quot;,&quot;Wed&quot;,&quot;Thurs&quot;,&quot;Fri&quot;,&quot;Sat&quot;,&quot;Sun&quot;) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_xAxis(type = &quot;category&quot;, data = dat_wf_name) %&gt;% ec_yAxis(type = &quot;value&quot;) %&gt;% ec_add_series( data = dat_wf, type = &quot;candlestick&quot;, mapping = ecaes(open = first, close = end, lowest = first, highest = end)) 7.11 象形柱图pictorialBar echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &quot;pictorialBar&quot;, symbol = &quot;rect&quot;, symbolRepeat = TRUE, barWidth = 10, symbolMargin = 2, symbolSize = 10, mapping = ecaes(x = weekDay, y = saleNum)) 7.12 线图lines 对应mapping的设置为：ecaes(start.lng, start.lat, end.lng, end.lat) echart() %&gt;% ec_backgroundColor(c(&#39;#404a59&#39;)) %&gt;% ec_geo( map = &#39;china&#39;, label = list( emphasis = list(show = FALSE)), itemStyle = list( normal = list( areaColor = &#39;#323c48&#39;, borderColor = &#39;#111&#39;), emphasis = list(areaColor = &#39;#2a333d&#39;))) %&gt;% ec_add_series( data = dat_geo_lines, mapping = ecaes(start.lng = start.lng, start.lat = start.lat, end.lng = end.lng, end.lat = end.lat), type = &quot;lines&quot;, coordinateSystem = &#39;geo&#39;, effect = list( show = TRUE, constantSpeed = 30, symbol = &#39;pin&#39;, symbolSize = 3, trailLength = 0), lineStyle = list( normal = list(width = 1, opacity = 0.6, curveness = 0.2))) 7.13 热力图heatmap coordinateSystem，heatmap可使用的坐标系，可选：二维的直角坐标系cartesian2d、地理坐标系geo、日历坐标系calendar 7.13.1 直角坐标系 echart() %&gt;% ec_add_series( data = dat, type = &quot;heatmap&quot;, mapping = ecaes(x = weekDay, y = fruit, value = saleNum)) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}:{c}&#39;) %&gt;% ec_visualMap( min = 20, max = 100, type = &#39;piecewise&#39;, left = &#39;center&#39;, orient = &#39;horizontal&#39;) 7.13.2 日历坐标系 echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_visualMap( min = 0, max = 1000, type = &#39;piecewise&#39;, left = &#39;center&#39;, top = 30, orient = &#39;horizontal&#39; ) %&gt;% ec_calendar( top = 120, left = 30, right = 30, cellSize = c(&#39;auto&#39;, 20), range = c(&#39;2017&#39;) # range = c(&#39;2017-01-01&#39;, &#39;2017-06-10&#39;) ) %&gt;% ec_add_series( type = &#39;heatmap&#39;, coordinateSystem = &#39;calendar&#39;, data = dat_date, mapping = ecaes(x = date, y = value)) 7.13.3 地理坐标系 AQI &lt;- read.csv(&quot;data/AQI.csv&quot;) dat_geo &lt;- AQI %&gt;% select(城市, lng, lat, AQI) echart() %&gt;% ec_backgroundColor(c(&#39;#404a59&#39;)) %&gt;% ec_legend( show = TRUE, left = &#39;right&#39;, top = &#39;bottom&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_title( text = &quot;全国主要城市空气质量&quot;, subtext = &quot;data from 真气网&quot;, left = &#39;center&#39;, textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = htmlwidgets::JS(&quot;function (params) {return params.name + &#39; : &#39; + params.value[2];}&quot;)) %&gt;% ec_visualMap( min = 0, max = 200, calculable = TRUE, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;), textStyle = list(color = &#39;#fff&#39;)) %&gt;% ec_geo( map = &#39;china&#39;, label = list( emphasis = list(show = FALSE)), itemStyle = list( normal = list( areaColor = &#39;#323c48&#39;, borderColor = &#39;#111&#39;), emphasis = list(areaColor = &#39;#2a333d&#39;))) %&gt;% ec_add_series( type = &#39;heatmap&#39;, coordinateSystem = &#39;geo&#39;, data = dat_geo, name = &#39;AQI&#39;, mapping = ecaes(name = 城市, x = lng, y = lat, value = AQI)) 7.14 主题河流图themeRiver series-themeRiver.data 对应mapping的设置为：mapping = ecaes(x, y, group) dat_ &lt;- dat %&gt;% mutate(date = rep(0:6,3)) %&gt;% select(date, saleNum, fruit) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_singleAxis( left = 80, type = &#39;category&#39;, boundaryGap = FALSE, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;), top = 60, bottom = 60) %&gt;% ec_add_series( data = dat_, type = &#39;themeRiver&#39;, mapping = ecaes(x = date, y = saleNum, group = fruit)) dat_ &lt;- dat %&gt;% mutate(date = rep(Sys.Date()+1:7,3)) %&gt;% select(date, saleNum, fruit) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_singleAxis( left = 80, type = &#39;time&#39;, boundaryGap = FALSE, top = 60, bottom = 60) %&gt;% ec_add_series( data = dat_, type = &#39;themeRiver&#39;, mapping = ecaes(x = date, y = saleNum, group = fruit)) 7.15 雷达图radar series-radar.data.value项数组是具体的数据，每个值跟radar.indicator 一一对应。所以需要提前配置ec_radar.indicator 对应mapping的设置为：ecaes(name, value) echart() %&gt;% ec_radar( indicator = list( list(name = &#39;Mon&#39;, max = 100), list(name = &#39;Tues&#39;, max = 100), list(name = &#39;Wed&#39;, max = 100), list(name = &#39;Thurs&#39;, max = 100), list(name = &#39;Fri&#39;, max = 100), list(name = &#39;Sat&#39;, max = 100), list(name = &#39;Sun&#39;, max = 100))) %&gt;% ec_legend(show = TRUE) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_add_series( type = &quot;radar&quot;, data = list( list(name = &quot;Fruit&quot;, value = c(100,80,30,40,20,60,70)))) echart() %&gt;% ec_radar( indicator = list( list(name = &#39;Mon&#39;, max = 100), list(name = &#39;Tues&#39;, max = 100), list(name = &#39;Wed&#39;, max = 100), list(name = &#39;Thurs&#39;, max = 100), list(name = &#39;Fri&#39;, max = 100), list(name = &#39;Sat&#39;, max = 100), list(name = &#39;Sun&#39;, max = 100))) %&gt;% ec_legend(show = TRUE) %&gt;% ec_tooltip( trigger = &#39;item&#39;, formatter = &#39;{b}: {c}&#39;) %&gt;% ec_add_series( data = dat, type = &quot;radar&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.16 平行坐标系parallel series-parallel.data.value项数组是具体的数据，每个值跟parallelAxis.dim 一一对应。所以需要提前配置ec_parallelAxis 对应mapping的设置为：ecaes(name, value) echart() %&gt;% ec_parallel( left = &#39;5%&#39;, right = &#39;13%&#39;, bottom = &#39;10%&#39;, top = &#39;20%&#39;, parallelAxisDefault = list( type = &#39;value&#39;, nameLocation = &#39;end&#39;, nameGap = 20)) %&gt;% ec_parallelAxis( list(dim = 0, name = &#39;Mon&#39;), list(dim = 1, name = &#39;Tues&#39;), list(dim = 2, name = &#39;Wed&#39;), list(dim = 3, name = &#39;Thurs&#39;), list(dim = 4, name = &#39;Fri&#39;), list(dim = 5, name = &#39;Sat&#39;), list(dim = 6, name = &#39;Sun&#39;)) %&gt;% ec_add_series( data = dat, type = &quot;parallel&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) 7.17 地图map 基础地理分布图：type=‘map’ 地理散点图：type=‘scatter’，coordinateSystem=‘geo’，详见散点图scatter 地理流向图：type=‘lines’，coordinateSystem=‘geo’，详见线图lines 7.17.1 基础地理分布图 对应mapping的设置为：ecaes(name, value) province &lt;- c(&#39;北京&#39;, &#39;天津&#39;, &#39;上海&#39;, &#39;重庆&#39;, &#39;河北&#39;, &#39;山西&#39;, &#39;辽宁&#39;, &#39;吉林&#39;, &#39;黑龙江&#39;, &#39;江苏&#39;, &#39;浙江&#39;, &#39;安徽&#39;, &#39;福建&#39;, &#39;江西&#39;, &#39;山东&#39;, &#39;河南&#39;, &#39;湖北&#39;, &#39;湖南&#39;, &#39;广东&#39;, &#39;海南&#39;, &#39;四川&#39;, &#39;贵州&#39;, &#39;云南&#39;, &#39;陕西&#39;, &#39;甘肃&#39;, &#39;青海&#39;, &#39;台湾&#39;, &#39;内蒙古&#39;, &#39;广西&#39;, &#39;西藏&#39;, &#39;宁夏&#39;, &#39;新疆&#39;, &#39;香港&#39;, &#39;澳门&#39;) dat_map &lt;- data.frame( name = province, value = round(runif(34, 0, 100), 0), stringsAsFactors = FALSE ) echart() %&gt;% ec_add_series( type = &#39;map&#39;, mapType = &#39;china&#39;, data = dat_map, mapping = ecaes(name = name, value = value), label = list( normal = list(show = FALSE), emphasis = list(show = FALSE))) %&gt;% ec_visualMap( calculable = TRUE, min = 0, max = 100, text = c(&quot;高&quot;, &quot;低&quot;), color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;)) %&gt;% ec_tooltip(trigger = &#39;item&#39;,formatter = &#39;{b}: {c}&#39;) 7.17.2 地理散点图 type=‘scatter’，coordinateSystem=‘geo’，详见散点图scatter 7.17.3 地理流向图 type=‘lines’，coordinateSystem=‘geo’，详见线图lines 7.18 漏斗图funnel 对应mapping的设置为：ecaes(name,value) echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;funnel&#39;, mapping = ecaes(name = weekDay, value = saleNum)) 7.19 仪表盘gauge 对应mapping的设置为：ecaes(value)或ecaes(name,value) echart() %&gt;% ec_add_series( data = list(list(name = &#39;完成率&#39;, value = 60)), type = &#39;gauge&#39;) # echart() %&gt;% # ec_add_series( # data = dat_groupby_weekDay, type = &#39;gauge&#39;, # max = max(dat_groupby_weekDay$saleNum), # mapping = ecaes(value = saleNum)) ## 只显示第一个name echart() %&gt;% ec_add_series( data = dat_groupby_weekDay, type = &#39;gauge&#39;, max = max(dat_groupby_weekDay$saleNum), mapping = ecaes(name = weekDay, value = saleNum)) 7.20 树图tree series-tree.data.value只在 tooltip 中显示。 树图tree只支持一个顶层parent，如果数据有两个（含）以上的顶层parent，只展示第一个parent，若想展示数据中的多个顶层parent，则需要主动添加一个顶层parent。 echart() %&gt;% ec_add_series( data = dat_tree, type = &quot;tree&quot;, symbolSize = 20, mapping = ecaes(parent = parent, children = child)) rootparent &lt;- function(df){ parents &lt;- unique(df[, 1]) children &lt;- df[, 2] parents_name &lt;- unique(parents) children_name &lt;- unique(children) root_child &lt;- unique(parents[!(parents %in% children)]) } root &lt;- rootparent(dat_tree) dat_tree_ &lt;- data.frame( parent = &quot;Z&quot;, child = root, value = NA) %&gt;% rbind(., dat_tree) echart() %&gt;% ec_add_series( data = dat_tree_, type = &quot;tree&quot;, symbolSize = 20, mapping = ecaes(parent = parent, children = child)) 7.21 矩形树图treemap echart() %&gt;% ec_add_series( data = dat_tree, type = &quot;treemap&quot;, mapping = ecaes(parent = parent, children = child, value = value)) echart() %&gt;% ec_add_series( data = dat_tree_, type = &quot;treemap&quot;, mapping = ecaes(parent = parent, children = child, value = value)) 7.22 旭日图sunburst echart() %&gt;% ec_add_series( data = dat_tree, type = &quot;sunburst&quot;, mapping = ecaes(parent = parent, children = child, value = value)) echart() %&gt;% ec_tooltip(trigger = &#39;item&#39;) %&gt;% ec_add_series( data = dat_tree_, type = &quot;sunburst&quot;, mapping = ecaes(parent = parent, children = child, value = value)) 7.23 - 桑基图sankey dat_nodes &lt;- jsonlite::fromJSON(&quot;http://www.echartsjs.com/gallery/data/asset/data/energy.json&quot;) dat_nodes_nodes &lt;- ec_list_parse(dat_nodes$nodes) dat_nodes_links &lt;- ec_list_parse(dat_nodes$links) echart() %&gt;% ec_add_series( list(data = dat_nodes_nodes, links = dat_nodes_links, type = &quot;sankey&quot;)) 7.24 - 关系图graph dat_gexf &lt;- rgexf::read.gexf(&quot;http://www.echartsjs.com/gallery/data/asset/data/les-miserables.gexf&quot;) dat_gexf_nodes &lt;- dat_gexf$nodes %&gt;% select(id, name = label) %&gt;% mutate(category = rep(c(0:9), each = 8)[1:77]) %&gt;% # mutate(category = rep(c(paste0(&quot;类目&quot;, 0:9)), 100)[1:77]) %&gt;% mutate(symbolSize = c(runif(60, 1, 10), runif(17, 10, 20))) %&gt;% ec_list_parse() dat_gexf_edges &lt;- dat_gexf$edges %&gt;% select(id, source, target, value = weight) %&gt;% ec_list_parse() categories &lt;- data.frame(name = paste0(&quot;类目&quot;, 0:9)) categories_ &lt;- ec_list_parse(categories) echart() %&gt;% ec_legend(show = TRUE) %&gt;% # ec_legend(data = categories_) %&gt;% ec_add_series( list(data = dat_gexf_nodes, links = dat_gexf_edges, type = &quot;graph&quot;, layout = &#39;force&#39;, categories = categories_)) 7.25 组合 提前设置好坐标系和坐标轴 echart() %&gt;% ec_legend(show = TRUE) %&gt;% ec_grid(top = &#39;55%&#39;, id = 0) %&gt;% ec_grid(bottom = &#39;55%&#39;, id = 1) %&gt;% ec_xAxis( type = &#39;category&#39;, gridIndex = 0, id = 0, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) %&gt;% ec_xAxis( type = &#39;category&#39;, gridIndex = 1, id = 1, data = c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;)) %&gt;% ec_yAxis(type = &#39;value&#39;, gridIndex = 0, id = 0) %&gt;% ec_yAxis(type = &#39;value&#39;, gridIndex = 1, id = 1) %&gt;% ec_add_series( data = filter(dat, fruit == &#39;Pear&#39;), type = &quot;line&quot;, xAxisIndex = 0, yAxisIndex = 0, id = 1, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_add_series( data = filter(dat, fruit != &#39;Pear&#39;), type = &quot;bar&quot;, xAxisIndex = 1, yAxisIndex = 1, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) "],
["advanced.html", "第 8 章 图表拓展 8.1 水球图liquidfill 8.2 字符云wordcloud", " 第 8 章 图表拓展 8.1 水球图liquidfill ecomfe/echarts-liquidfill # https://github.com/ecomfe/echarts-liquidfill lf_opt = list( series = list( list( type = &#39;liquidFill&#39;, radius = &#39;90%&#39;, label = list( normal = list( formatter = &#39;占比 \\n 60%&#39;, textStyle = list( fontSize = 60 ) ) ), data = c(0.6, 0.5, 0.4) )) ) echart(lf_opt) # # 或者通过下列方式 # echart() %&gt;% # ec_add_series( # data = c(0.6, 0.5, 0.4), # type = &#39;liquidFill&#39;, # radius = &#39;90%&#39;, # label = list( # normal = list( # formatter = &#39;占比 \\n 60%&#39;, # textStyle = list( # fontSize = 60 # ) # ) # )) 8.2 字符云wordcloud ecomfe/echarts-wordcloud library(jiebaR) file &lt;- read_lines(&quot;data/2017年中央政府工作报告.txt&quot;) word &lt;- segment(file, worker()) word_freq &lt;- freq(word) write.csv(word_freq, &quot;data/word_freq.csv&quot;, row.names = FALSE) word_freq &lt;- read.csv(&quot;data/word_freq.csv&quot;) %&gt;% filter(freq &gt; 20, stringi::stri_length(char) &gt; 1) word_freq &lt;- word_freq[order(word_freq$freq, decreasing=TRUE),] echart() %&gt;% ec_add_series( type = &#39;wordCloud&#39;, data = word_freq, mapping = ecaes(name = char, value = freq) ) "],
["shiny.html", "第 9 章 shiny 9.1 简单例子 9.2 shiny动态数据 9.3 shiny events 9.4 shiny toolbox拓展", " 第 9 章 shiny 9.1 简单例子 library(tidyverse) library(echarter) library(shiny) lf_opt = list( series = list( list( type = &#39;liquidFill&#39;, radius = &#39;90%&#39;, label = list( normal = list( formatter = &#39;占比 \\n 60%&#39;, textStyle = list( fontSize = 60 ) ) ), data = c(0.6, 0.5, 0.4) )) ) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;),3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) ui &lt;- fluidPage( title = &quot;echarter Shiny&quot;, fluidRow( column(width = 6, echartsOutput(&quot;result&quot;) ), column(width = 6, echartsOutput(&quot;liquidFill&quot;) ) ) ) server &lt;- function(input, output, session){ output$result &lt;- renderEcharts({ echart(theme = &#39;shine&#39;) %&gt;% ec_grid(right = &quot;15%&quot;) %&gt;% ec_legend( show = TRUE, orient = &quot;vertical&quot;, left = &quot;right&quot;, top = &quot;middle&quot;) %&gt;% ec_toolbox( show = TRUE, orinent = &#39;horizontal&#39;, feature = list( dataView = list( show = TRUE, readOnly = TRUE), magicType = list( show = TRUE, type = c(&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;)), restore = list( show = TRUE), brush = list(), saveAsImage = list( show = TRUE))) %&gt;% ec_brush(xAxisIndex = &quot;all&quot;, yAxisIndex = &quot;all&quot;) %&gt;% ec_dataZoom(type = &#39;slider&#39;) %&gt;% ec_add_series( dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_title(text = &quot;Fruit Sales&quot;) %&gt;% ec_xAxis(nameLocation = &quot;center&quot;, nameGap = 30) %&gt;% ec_yAxis(nameLocation = &quot;center&quot;, nameGap = 30) }) output$liquidFill &lt;- renderEcharts({ echart(lf_opt) }) } shinyApp(ui, server) 9.2 shiny动态数据 动态添加数据分为两种方式，一种是通过echarts的setOption修改series.data，另一种是直接使用shiny的reactive重新绘制echarts。 library(tidyverse) library(echarter) library(shiny) dat_date &lt;- data.frame( date = as.Date(&#39;2017-01-01&#39;) + seq(0,364), value = round(runif(365, 0, 1000), 0), stringsAsFactors = FALSE) dat_date_start &lt;- head(dat_date, 10) jsCode &lt;- &quot; Shiny.addCustomMessageHandler(&#39;add_data&#39;, function(data) { var chart = get_echarts(&#39;data_dynamic&#39;); chart.setOption({ title: { text: &#39;value:&#39;+ data[Object.keys(data).pop()][1] }, series: [{ data: data }] }); });&quot; ui &lt;- fluidPage( tags$head( tags$script(jsCode) ), column(width = 6, echartsOutput(&quot;data_dynamic&quot;)), column(width = 6, echartsOutput(&quot;data_dynamic2&quot;)) ) server &lt;- function(input, output, session) { data &lt;- dat_date_start data_new &lt;- reactive({ invalidateLater(1000) date_last &lt;- max(data$date) add_data &lt;- head(dat_date[dat_date$date &gt; date_last,], 1) data &lt;&lt;- rbind(data, add_data)[-1, ] data }) datetime_to_timestamp &lt;- function(dt) { tmstmp &lt;- as.numeric(as.POSIXct(dt)) tmstmp &lt;- 1000 * tmstmp tmstmp } observe({ invalidateLater(1000) data_new_ &lt;- data_new() %&gt;% mutate(date = datetime_to_timestamp(date)) %&gt;% setNames(NULL) %&gt;% jsonlite::toJSON() session$sendCustomMessage(&quot;add_data&quot;, data_new_) }) output$data_dynamic &lt;- renderEcharts({ echart() %&gt;% ec_title(text = &quot;value&quot;) %&gt;% ec_add_series( data = data, type = &#39;bar&#39;, animation = FALSE, mapping = ecaes(x = date, y = value)) %&gt;% ec_xAxis( type = &#39;time&#39;, boundaryGap = c(&#39;0.1%&#39;,&#39;0.1%&#39;), min = NULL, max = NULL, interval = 3600 * 24 * 1000, maxInterval = 3600 * 24 * 1000) }) output$data_dynamic2 &lt;- renderEcharts({ session$sendCustomMessage(&quot;add_data2&quot;, paste0(&quot;value: &quot;, tail(data$value,1))) echart() %&gt;% ec_title(text = &quot;value&quot;) %&gt;% ec_add_series( data = data_new(), type = &#39;bar&#39;, animation = FALSE, mapping = ecaes(x = date, y = value)) %&gt;% ec_xAxis( type = &#39;time&#39;, boundaryGap = c(&#39;0.1%&#39;,&#39;0.1%&#39;), min = NULL, max = NULL, interval = 3600 * 24 * 1000, maxInterval = 3600 * 24 * 1000) }) } shinyApp(ui, server) 9.3 shiny events 在 ECharts 中主要通过 on 方法添加事件处理函数，该文档描述了所有 ECharts 的事件列表。 ECharts 中的事件分为两种，一种是鼠标事件，在鼠标点击某个图形上会触发，还有一种是触发图表行为的事件。 9.3.1 鼠标事件 鼠标事件的事件参数是事件对象的数据的各个属性，对于图表的点击事件，基本参数如下，其它图表诸如饼图可能会有部分附加参数。例如饼图会有percent属性表示百分比，具体见各个图表类型的 label formatter 回调函数的 params。 { // 当前点击的图形元素所属的组件名称， // 其值如 &#39;series&#39;、&#39;markLine&#39;、&#39;markPoint&#39;、&#39;timeLine&#39; 等。 componentType: string, // 系列类型。值可能为：&#39;line&#39;、&#39;bar&#39;、&#39;pie&#39; 等。当 componentType 为 &#39;series&#39; 时有意义。 seriesType: string, // 系列在传入的 option.series 中的 index。当 componentType 为 &#39;series&#39; 时有意义。 seriesIndex: number, // 系列名称。当 componentType 为 &#39;series&#39; 时有意义。 seriesName: string, // 数据名，类目名 name: string, // 数据在传入的 data 数组中的 index dataIndex: number, // 传入的原始数据项 data: Object, // sankey、graph 等图表同时含有 nodeData 和 edgeData 两种 data， // dataType 的值会是 &#39;node&#39; 或者 &#39;edge&#39;，表示当前点击在 node 还是 edge 上。 // 其他大部分图表中只有一种 data，dataType 无意义。 dataType: string, // 传入的数据值 value: number|Array, // 数据图形的颜色。当 componentType 为 &#39;series&#39; 时有意义。 color: string, // 用户自定义的数据。只在 graphic component 和自定义系列（custom series） // 中生效，如果节点定义上设置了如：{type: &#39;circle&#39;, info: {some: 123}}。 info: * } 目前支持的有click、mouseover echarter中可以通过下来参数获取相应数据。 elementId_events_componentType elementId_events_seriesType elementId_events_seriesIndex elementId_events_seriesName elementId_events_name elementId_events_dataIndex elementId_events_data elementId_events_dataType elementId_events_value elementId_events_color elementId_events_info 9.3.2 触发图表行为 目前支持的有 brushselected legendselectchanged datazoom datarangeselected updateAxisPointer echarts see slso echarter中可以通过下来参数获取相应数据。 elementId_brushselected elementId_legendselectchanged elementId_datazoom elementId_datarangeselected elementId_updateAxisPointer library(tidyverse) library(echarter) library(shiny) dat &lt;- data.frame( saleNum = round(runif(21, 20, 100), 0), fruit = c(rep(&quot;Apple&quot;, 7), rep(&quot;Pear&quot;, 7), rep(&quot;Banana&quot;, 7)), weekDay = c(rep(c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;),3)), price = round(runif(21, 10, 20), 0), stringsAsFactors = FALSE) ui &lt;- fluidPage( title = &quot;echarter Shiny&quot;, fluidRow( column(width = 6, echartsOutput(&quot;scatter&quot;) ), column(width = 6, echartsOutput(&quot;pie&quot;) ), column( width = 6, &quot;scatter_click_componentType:&quot;, verbatimTextOutput(&quot;click_componentType&quot;), &quot;scatter_click_seriesType:&quot;, verbatimTextOutput(&quot;click_seriesType&quot;), &quot;scatter_click_seriesIndex:&quot;, verbatimTextOutput(&quot;click_seriesIndex&quot;), &quot;scatter_click_seriesName:&quot;, verbatimTextOutput(&quot;click_seriesName&quot;), &quot;scatter_click_name:&quot;, verbatimTextOutput(&quot;click_name&quot;), &quot;scatter_click_dataIndex:&quot;, verbatimTextOutput(&quot;click_dataIndex&quot;), &quot;scatter_click_data:&quot;, verbatimTextOutput(&quot;click_data&quot;), &quot;scatter_click_dataType:&quot;, verbatimTextOutput(&quot;click_dataType&quot;), &quot;scatter_click_value:&quot;, verbatimTextOutput(&quot;click_value&quot;), &quot;scatter_click_color:&quot;, verbatimTextOutput(&quot;click_color&quot;), &quot;scatter_click_info:&quot;, verbatimTextOutput(&quot;click_info&quot;) ), column( width = 6, &quot;scatter_legendselectchanged:&quot;, verbatimTextOutput(&quot;legendselectchanged&quot;), &quot;scatter_brushselected:&quot;, verbatimTextOutput(&quot;brushselected&quot;), &quot;scatter_datazoom:&quot;, verbatimTextOutput(&quot;datazoom&quot;), &quot;scatter_datarangeselected:&quot;, verbatimTextOutput(&quot;datarangeselected&quot;), &quot;scatter_updateAxisPointer:&quot;, verbatimTextOutput(&quot;updateAxisPointer&quot;)) ) ) server &lt;- function(input, output, session){ output$scatter &lt;- renderEcharts({ echart(theme = &#39;shine&#39;) %&gt;% ec_title(text = &quot;Fruit Sales&quot;) %&gt;% ec_grid(right = &quot;15%&quot;) %&gt;% ec_legend( show = TRUE, orient = &quot;vertical&quot;, left = &quot;right&quot;, top = &quot;10%&quot;) %&gt;% ec_tooltip( trigger = &#39;item&#39;, axisPointer = list(type = &#39;cross&#39;)) %&gt;% ec_toolbox( show = TRUE, orinent = &#39;horizontal&#39;, feature = list( dataView = list( show = TRUE, readOnly = TRUE), magicType = list( show = TRUE, type = c(&#39;line&#39;, &#39;bar&#39;, &#39;stack&#39;, &#39;tiled&#39;)), restore = list( show = TRUE), brush = list(), saveAsImage = list( show = TRUE))) %&gt;% ec_brush(xAxisIndex = &quot;all&quot;, yAxisIndex = &quot;all&quot;) %&gt;% ec_dataZoom(type = &#39;slider&#39;) %&gt;% ec_visualMap( type = &#39;continuous&#39;, calculable = TRUE, min = 0, max = 100, left = &#39;right&#39;, bottom = &#39;10%&#39;, color = c(&#39;#d94e5d&#39;,&#39;#eac736&#39;,&#39;#50a3ba&#39;)) %&gt;% ec_add_series( dat, type = &quot;scatter&quot;, mapping = ecaes(x = weekDay, y = saleNum, group = fruit)) %&gt;% ec_xAxis(nameLocation = &quot;center&quot;, nameGap = 30) %&gt;% ec_yAxis(nameLocation = &quot;center&quot;, nameGap = 30) }) output$pie &lt;- renderEcharts({ weeks &lt;- c(&#39;Mon&#39;,&#39;Tues&#39;,&#39;Wed&#39;,&#39;Thurs&#39;,&#39;Fri&#39;,&#39;Sat&#39;,&#39;Sun&#39;) if(!isTruthy(input$scatter_updateAxisPointer)){ week_selected &lt;- weeks }else{ week_selected &lt;- weeks[input$scatter_updateAxisPointer[[&quot;dataIndex&quot;]]+1] } fruits &lt;- c(&quot;Apple&quot;,&quot;Pear&quot;,&quot;Banana&quot;) if(!isTruthy(input$scatter_legendselectchanged)){ fruit_selected &lt;- fruits }else{ fruit_selected &lt;- names(unlist(input$scatter_legendselectchanged)[unlist(input$scatter_legendselectchanged)]) } dat_pie_selected &lt;- dat %&gt;% filter(weekDay == week_selected, fruit %in% fruit_selected) %&gt;% group_by(fruit) %&gt;% summarise( saleNum = sum(saleNum), price = round(mean(price),2)) echart() %&gt;% ec_title(text = &quot;Data From Left Echarts&quot;) %&gt;% ec_legend(show = TRUE, right = &quot;10%&quot;) %&gt;% ec_add_series( data = dat_pie_selected, type = &#39;pie&#39;, mapping = ecaes(name = fruit, value = saleNum)) }) output$legendselectchanged &lt;- renderPrint({ input$scatter_legendselectchanged }) output$brushselected &lt;- renderPrint({ input$scatter_brushselected }) output$datazoom &lt;- renderPrint({ input$scatter_datazoom }) output$datarangeselected &lt;- renderPrint({ input$scatter_datarangeselected }) output$updateAxisPointer &lt;- renderPrint({ input$scatter_updateAxisPointer }) ## click output$click_componentType &lt;- renderPrint({ input$scatter_click_componentType }) output$click_seriesType &lt;- renderPrint({ input$scatter_click_seriesType }) output$click_seriesIndex &lt;- renderPrint({ input$scatter_click_seriesIndex }) output$click_seriesName &lt;- renderPrint({ input$scatter_click_seriesName }) output$click_name &lt;- renderPrint({ input$scatter_click_name }) output$click_dataIndex &lt;- renderPrint({ input$scatter_click_dataIndex }) output$click_data &lt;- renderPrint({ input$scatter_click_data }) output$click_dataType &lt;- renderPrint({ input$scatter_click_dataType }) output$click_value &lt;- renderPrint({ input$scatter_click_value }) output$click_color &lt;- renderPrint({ input$scatter_click_color }) output$click_info &lt;- renderPrint({ input$scatter_click_info }) } shinyApp(ui, server) 9.4 shiny toolbox拓展 library(tidyverse) library(echarter) library(shiny) toolbox_days &lt;- &quot;function(params) { Shiny.setInputValue(&#39;toolbox_select&#39;, $(this).attr(&#39;featureName&#39;)); }&quot; toolbox_weeks &lt;- &quot;function(params) { Shiny.setInputValue(&#39;toolbox_select&#39;, $(this).attr(&#39;featureName&#39;)); }&quot; toolbox_months &lt;- &quot;function(params) { Shiny.setInputValue(&#39;toolbox_select&#39;, $(this).attr(&#39;featureName&#39;)); }&quot; toolbox_years &lt;- &quot;function(params) { Shiny.setInputValue(&#39;toolbox_select&#39;, $(this).attr(&#39;featureName&#39;)); }&quot; toolbox_icon_date_days &lt;- &quot;path://M600 1075 l0 -725 515 0 515 0 0 725 0 725 -60 0 -60 0 0 -65 0 -65 -390 0 -390 0 0 65 0 65 -65 0 -65 0 0 -725z m910 230 l0 -245 -390 0 -390 0 0 245 0 245 390 0 390 0 0 -245z m0 -600 l0 -235 -390 0 -390 0 0 235 0 235 390 0 390 0 0 -235z&quot; toolbox_icon_date_weeks &lt;- &quot;path://M382 1762 l-43 -37 25 -62 c38 -93 73 -219 92 -335 13 -81 18 -194 21 -540 l5 -438 624 0 624 0 0 671 c0 600 -2 675 -16 705 -27 57 -60 68 -216 72 l-137 4 -15 -53 c-9 -29 -16 -56 -16 -61 0 -4 57 -9 127 -10 125 -3 128 -4 140 -28 10 -19 13 -158 13 -607 l0 -583 -504 0 -504 0 -5 407 c-5 444 -13 525 -73 713 -29 92 -83 220 -93 220 -3 0 -25 -17 -49 -38z M754 1547 c-2 -7 -3 -100 -2 -207 l3 -195 338 -3 337 -2 0 210 0 210 -335 0 c-263 0 -337 -3 -341 -13z m556 -197 l0 -100 -215 0 -215 0 0 100 0 100 215 0 215 0 0 -100z M690 965 l0 -55 175 0 175 0 0 -80 0 -80 -150 0 -150 0 0 -50 0 -50 150 0 150 0 0 -70 0 -70 60 0 60 0 0 70 0 70 150 0 150 0 0 50 0 50 -150 0 -150 0 0 80 0 80 175 0 175 0 0 55 0 55 -410 0 -410 0 0 -55z&quot; toolbox_icon_date_months &lt;- &quot;path://M542 1767 l-42 -43 26 -38 c68 -100 118 -257 134 -424 5 -53 10 -280 10 -504 l0 -408 475 0 475 0 0 675 c0 742 2 718 -60 750 -22 11 -63 15 -163 15 l-134 0 -12 -42 c-7 -24 -15 -51 -18 -61 -5 -17 2 -18 109 -12 161 10 152 22 156 -209 l3 -186 -359 0 -359 0 -6 60 c-10 91 -44 216 -83 300 -37 80 -92 170 -103 170 -4 0 -26 -19 -49 -43z m958 -752 l0 -145 -355 0 -355 0 0 145 0 145 355 0 355 0 0 -145z m0 -405 l0 -140 -355 0 -355 0 0 140 0 140 355 0 355 0 0 -140z&quot; toolbox_icon_date_years &lt;- &quot;path://M1130 1625 l0 -185 -380 0 -380 0 0 -60 0 -60 135 0 135 0 0 -235 0 -235 245 0 245 0 0 -130 0 -130 -223 0 -223 0 -18 33 c-35 60 -116 155 -178 208 l-61 53 -24 -29 c-62 -76 -63 -69 6 -131 113 -103 218 -266 257 -400 l16 -56 57 7 c31 4 59 10 64 14 6 6 -21 98 -48 164 -7 16 21 17 509 17 l516 0 0 60 0 60 -260 0 -260 0 0 130 0 130 230 0 230 0 0 60 0 60 -230 0 -230 0 0 175 0 175 288 2 287 3 3 58 3 57 -291 0 -290 0 0 185 0 185 -65 0 -65 0 0 -185z m0 -480 l0 -175 -185 0 -185 0 0 175 0 175 185 0 185 0 0 -175z&quot; dat_date &lt;- data.frame( date = as.Date(&#39;2017-04-01&#39;) + seq(0,364), value = round(runif(365, 0, 1000), 0), stringsAsFactors = FALSE) ui &lt;- fluidPage( title = &quot;echarter Shiny&quot;, fluidRow( echartsOutput(&quot;result&quot;), verbatimTextOutput(&quot;select&quot;) ) ) server &lt;- function(input, output, session){ ec &lt;- echart() %&gt;% ec_toolbox( orinent = &#39;horizontal&#39;, feature = list( mydays = list( show = TRUE, title = &#39;Days&#39;, icon = toolbox_icon_date_days, onclick = htmlwidgets::JS(toolbox_days) ), myweeks = list( show = TRUE, title = &#39;Weeks&#39;, icon = toolbox_icon_date_weeks, onclick = htmlwidgets::JS(toolbox_weeks) ), mymonths = list( show = TRUE, title = &#39;Months&#39;, icon = toolbox_icon_date_months, onclick = htmlwidgets::JS(toolbox_months) ), myyears = list( show = TRUE, title = &#39;Years&#39;, icon = toolbox_icon_date_years, onclick = htmlwidgets::JS(toolbox_years) ) ) ) data_toolbox &lt;- reactive({ if(isTruthy(input$toolbox_select)){ if(input$toolbox_select == &quot;mydays&quot;){ dat_date }else if(input$toolbox_select == &quot;myweeks&quot;){ dat_date %&gt;% group_by(date = lubridate::ceiling_date(date, &quot;weeks&quot;)) %&gt;% summarise(value = sum(value)) %&gt;% ungroup() }else if(input$toolbox_select == &quot;mymonths&quot;){ dat_date %&gt;% group_by(date = format(date, &quot;%Y-%m&quot;)) %&gt;% summarise(value = sum(value)) %&gt;% ungroup() }else if(input$toolbox_select == &quot;myyears&quot;){ dat_date %&gt;% group_by(date = format(date, &quot;%Y&quot;)) %&gt;% summarise(value = sum(value)) %&gt;% ungroup() } }else{ dat_date } }) output$result &lt;- renderEcharts({ ec %&gt;% ec_add_series( data = data_toolbox(), type = &#39;line&#39;, name = &quot;date&quot;, animation = FALSE, mapping = ecaes(x = date, y = value)) }) output$select &lt;- renderPrint({ if(isTruthy(input$toolbox_select)){ input$toolbox_select }else{ NULL } }) } shinyApp(ui, server) "],
["articles.html", "A 参考", " A 参考 htmlwidgets highcharter recharts echarts4r How to write a useful htmlwidgets in R: tips and walk-through a real example "]
]
